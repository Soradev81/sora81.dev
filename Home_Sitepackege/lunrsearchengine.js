
var documents = [{
    "id": 0,
    "url": "https://soradev81.github.io/404.html",
    "title": "404",
    "body": "404 Page not found!検索欄より記事をお探しいただくか、こちらからHOMEにアクセスしてください。また2022年3月にブログを改修したため、現在前ブログの記事を全ては移行できていません。こちらのContactページからリクエストいただくと優先的に移行いたしますのでお気軽にお問合せください。 "
    }, {
    "id": 1,
    "url": "https://soradev81.github.io/about",
    "title": "Profile",
    "body": "しろくま＠胡瓜こんにちは！岐阜高専電子制御工学科に生息している白熊です。 2013 - 2015: RCJ Soccer LightweightにSTKとして参加しました。2014,2015年に全国大会に進出しベスト16の成績を残しました。 2016 - 2022: RCJ Soccer LightweightにRoot41の回路・機械担当として参加しました。2021年からはBLDC制御を研究し、2022年のRCJの全国大会で日本ロボット学会賞を受賞しました。 2022 -: RCJ Rescue MazeチームBlendのキャプテンをやっています。 このブログの趣旨: 誰でも読みやすく、技術系以外の人でもおもしろい記事を目標にしているブログです。珈琲や紅茶に合うような読みやすい記事を書いていきたいと思っています。 Contact:  Twitter: @shirokuma89dev E-mail: contact@shirokuma89. dev"
    }, {
    "id": 2,
    "url": "https://soradev81.github.io/authors",
    "title": "Author",
    "body": "                                                                                                                                                              しろくま＠胡瓜:         高専で電子制御を学んでいる白熊です。RCJ Rescue MazeチームのBlendのキャプテンやってます。ゆるい絵を描きがちです。よろしくね。                "
    }, {
    "id": 3,
    "url": "https://soradev81.github.io/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 4,
    "url": "https://soradev81.github.io/contact",
    "title": "Contact",
    "body": "  こちらから白熊にメールを送ることができます。このフォームにはformspreeを利用しています。   "
    }, {
    "id": 5,
    "url": "https://soradev81.github.io/",
    "title": "Home",
    "body": "                                                                                              SNSとの距離感              :             最近SNSとの付き合い方を見直すべきかもしれないと感じることが多いです。自分は同年齢の人たちと比較すると電子機. . . :                                               雑記                                                        27 Jul 2022        &lt;/span&gt;                                                                                                                  オムニホイール制御指南              :             RCJをやっている人なら一度は聞いたことがあるオムニホイールという部品。これとモーターのセットを3セット以上使. . . :                                               RCJ                                数学                                                        初心者向け                                15 Jul 2022        &lt;/span&gt;                                                                                                                  VSCode拡張機能              :             みなさんVisual Studio Codeを使っていますか。単体だとタブ機能のついたメモ帳のようなものなので. . . :                                               Software                                雑記                                                        28 Jun 2022        &lt;/span&gt;                                                                                                                  三角関数入門              :             sinα　cosβ　tanθ唐突に見せられたこの文字列を見て拒絶反応を起こしてる人いませんか？三角関数より. . . :                                               数学                                                        初心者向け                                21 Jun 2022        &lt;/span&gt;                                                                                                                  ベクトル入門              :             唐突ですがベクトルというものをご存知でしょうか。英語ではvectorと言います。高校生の方はもしかしたら数学の. . . :                                               数学                                                        初心者向け                                30 Apr 2022        &lt;/span&gt;                                                                                                                  全国大会2022@京阪奈              :             こんばんは。4月23,24日はロボカップジュニアの全国大会でした。僕はRoot41（WSL053）としてSoc. . . :                                               RCJ                                                        28 Apr 2022        &lt;/span&gt;                           &laquo;          1        2        3        4       &raquo; "
    }, {
    "id": 6,
    "url": "https://soradev81.github.io/links",
    "title": "Links",
    "body": "リンク一覧です。 Blend: Link: Blend Blog 僕が2022シーズンから所属しているRCJ Rescue Mazeチームのブログです。進捗や寮生活をゆるーく投稿しています。 ゆーざーの日記: Link: ゆーざーの日記 KollagenというチームでRCJ Soccer Lightweightに出場していたUserさんのブログです Junのロボット日記: Link: Junのロボット日記 仲良しのAll_outlookのJunくんのブログです。 岐阜高専: Link: 岐阜高専 白熊が通っている変な学校です。 "
    }, {
    "id": 7,
    "url": "https://soradev81.github.io/SECURITY/",
    "title": "Security Policy",
    "body": "Security PolicySupported Versions: Use this section to tell people about which versions of your project arecurrently being supported with security updates.       Version   Supported         5. 1. x   :white_check_mark:       5. 0. x   :x:       4. 0. x   :white_check_mark:       &lt; 4. 0   :x:   Reporting a Vulnerability: Use this section to tell people how to report a vulnerability. Tell them where to go, how often they can expect to get an update on areported vulnerability, what to expect if the vulnerability is accepted ordeclined, etc. "
    }, {
    "id": 8,
    "url": "https://soradev81.github.io/page2/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 9,
    "url": "https://soradev81.github.io/page3/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 10,
    "url": "https://soradev81.github.io/page4/",
    "title": "Home",
    "body": "  {% for post in paginator. posts %}    {% include postbox. html %}  {% endfor %}  {% include pagination. html %}"
    }, {
    "id": 11,
    "url": "https://soradev81.github.io/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 12,
    "url": "https://soradev81.github.io/20220727/",
    "title": "SNSとの距離感",
    "body": "2022/07/27 - 最近SNSとの付き合い方を見直すべきかもしれないと感じることが多いです。 自分は同年齢の人たちと比較すると電子機器を扱っている時間が長い自覚はありますが、別にそれが悪いことだとは感じていませんし、そういうものを学ぶと決めて高専に入学したわけですから特に問題ではありません。 Instagram、Facebookはそもそもあんまりやってなかったので、ログアウトだけで適切な距離感をとることができました。しかしTwitter、こいつだけは曲者です。 Twitterをはじめた理由: そもそもなぜTwitterをはじめたかというとロボカップジュニア競技者・OBなどと交流したいというものがありました。憧れのとみっくすさんに相方がリプライを送って直接話してる姿は羨ましいものでしたし、自分も交流したいなって。 あとは自分の作ったものを誰かに見てもらいたいというものですね。小さい頃から何か創ったら親や友達に「見てみてー」と見せたりするのが好きだったので、それの延長線上にTwitterがあった感じです。めっちゃ楽しかった。 全然知らない人のツイート覗きにいくのも世界が広がる感じがして楽しかったですね。某ベーコン大臣がドリアン食べてるなーとかアヒルマスクおもろいなとかそんな感じのノリで純粋にTwitterを楽しめていました。 大人の世界を覗きはじめた: 2020年春のCovid-19の流行辺りから少しづつTwitterに対する意識が変わりはじめました。トレンド欄のほとんどがネガティブなニュースになり、今もその傾向は続きつつあります。（それ以前がどうだったかはあんまり覚えていませんけどね。） 大人の世界ってもしかしたら自分が想像してるような綺麗な世界ばかりではないのかもしれないと感じはじめました。見ようとしなくともRTとかで視界には入りますし。意外と世の中って学校の先生みたいに尊敬できる大人ばかりじゃないのかもって。 これがCovid-19がトリガーになってこのような鼠色の世界になったのか、それとも自分が心身ともに成長してそう見えるようになっただけであって元々そういう世界なのか、これは僕にはわかりません。 正義の盾と心身の疲労: 何か良くないことがあった時に、人間はそれに対して善の側にいると錯覚することがあります。この錯覚が人を傷つける発言につながることも多いですし、特に匿名という環境下では顕著に現れます。 近年の政治家・思想家のリプ欄とか終わってますよね。議論とか思想の共有というよりもはや喧嘩です。 「ワクチンは猛毒」とか「fugafuga党は絶対にだめ」とかいう類のツイート、一回は見たことあると思います。ただし本人いくら正しいと思っていても周りの人がどう思うかはわかりませんし、意見を述べることと感情的になることは全く別のことです。 もちろんTwitterの使い方なんて自由ですし、自分の考えや思想を人に伝えたり啓蒙する目的でSNSを利用する人もいます。が、僕はそういうのはあんまり得意ではないのかも。 歴史を遡るとえらい将軍とかが現役引退した後に隠居したりしていますがその気持ちもわかる気がします。 1週間離れてみた: 先日の参院選前の暗殺事件の時に「Twitterを見ることで精神が疲労している」感覚を強く覚えました。これをきっかけに一週間Twitterを見ないことにしました。（ツイートはしましたが、ツイートの機能しか持たずTLやいいね等を見る機能はないAppを入れました。） あの時感じたのはだいぶ心が軽くなったということです。穏やかな海に潜ったかのような感覚です。何か心の中のモヤモヤが晴れた感じがしました。 しかしTwitterを絶った以上馬の合う人との交流はもちろんできません。 社会から一定の距離を置きたいという気持ちと、交流を楽しみたいという気持ちがうまく噛み合わない感じです。 良いことももちろん: Twitterも悪いことばかりではありません。自分の成果や考えを世に出すことで得られた知識や知見は計り知れないものでしたし、人と交流していくうちに自分にしかないものを見つけられてきている気がします。これを一般に個性とか自分らしさって言うらしいです。知らんけど。 京阪奈の全国大会ではTwitterというツールがあることによって交流の輪が広がりましたし、そもそもAll_outlookとの最初の接点もTwitterなのでそれはTwitterやっててよかったなって思う点ではあります。 高専の友達とTwitterで交流するのもめっちゃ楽しかったですね。あいつがドーナツ買ってる、おいしそーぼくにちょーだいみたいな感じ。Twitter特有のノリが楽しかったです。 さてこれからどうするか: ざっとまとめるとこんな感じです。  別にSNSは見なければならないものではない 見たくないものからは逃げたって構わない 少しでも楽しめてないなと感じたら距離を置くことも大切にする自分に関係ない誰かが何をしたかどうかなんてぶっちゃけどうでもいいですし気に留めるだけ無駄です。一歩間違えると誤解を生みかねない表現ですが、ある程度は他人事として処理することも大切なのかもしれません。 本来楽しむはずではじめたTwitterで気分を悪くしないために、Twitterから離れることも必要というのは何かヤマアラシのジレンマに似たようなものも感じます。 僕は8月生まれなので、あと1年と数週間で法律上は成人として扱われることになります。Twitterなどで色々な世界を見てしまった今、楽しみなような怖いような複雑な感情です。 18歳になった時、この混沌とした世界は僕の目にどう映っているのか。それは今の僕には想像できるものではありません。 "
    }, {
    "id": 13,
    "url": "https://soradev81.github.io/20220715/",
    "title": "オムニホイール制御指南",
    "body": "2022/07/15 - RCJをやっている人なら一度は聞いたことがあるオムニホイールという部品。 これとモーターのセットを3セット以上使うことで、前を向いたまま姿勢を崩さずに全方位に移動するというチートみたいな動きができるようになります。実際に近年の全国大会に出場するサッカーのチームのほとんどはオムニホイールを採用しています。 オムニホイールを使用した実際の動きの例です。このデモではジャイロ・地磁気センサ等の姿勢を取得できるセンサを用いていませんが、かなり精度良く前を向いて動けています。研究・微調整の賜物です。 概要 - Abstract: この記事は主に制御式を理解して導出することを目標にした記事です。行列を知らない方も多いのと思うのでベクトルの和のみで話を進めます。 対象読者:  オムニホイール制御に初めて挑戦する方 式の意味を理解してオムニホイールを制御したい方この記事を読み進めるにはベクトル入門と三角関数入門の内容を既に理解できている必要があります。 理解せずに最後の章だけ見て自分のロボットのプログラムに制御式を組み込むのも悪くはないですが…。せっかくなので、ね？ オムニホイールのベクトル合成の仕組みについてはベクトル入門の最終章で紹介しているのでそちらを参照してください。 導入: 今回は4輪のモデルを使って説明していきます。動径は時計回りを正とし、正面を北とし0°とします。東が90°で南が180°で西が270°です。 今回は並行移動（=回転せずにまっすぐ前を向いたまま移動する）を前提条件とします。回転したい人はモーターをいい感じにぐるぐるしてください。       $\vec{v_n}$   各モーターの速度ベクトル（緑）       $\theta_n$   各モーターの取り付け角（図では$\theta_2$以降は省略）       $l_n$   各モーターの取り付け角を図示した線       $\theta$   ロボットの進行方向       $\vec{v}$   ロボットの速度ベクトル（青）   記号多いですが頑張りましょう。ここをちゃんと押さえることで制御の仕組みが後の説明を読んだときに腑に落ちやすくなります💪 記号の矢印を取ると大きさという意味になることも同時に押さえておきましょう。  $v$は$\vec{v}$の大きさ（=$\vec{v}$の矢印の長さ）→ ロボットの速さを表す $v_n$は$\vec{v_n}$の大きさ（=$\vec{v_n}$の矢印の長さ）→ 各モーターの速さを表すモーターが正転する方向は車輪から生えている黒い矢印の向きで示しています。つまりこのモデルの場合、全てのモーターを正転させると反時計回りに回ります。 また、モーターの取り付け角$\theta_n$はお使いのロボットに合わせて変更してください。例えば上の図のモデルだと$\theta_1=45^\circ,\theta_2=135^\circ,\theta_3=225^\circ,\theta_4=315^\circ$です。  💡Note数学的にはx軸方向を0°とし反時計回りを正とするのですが、オムニホイール制御で姿勢制御する際にジャイロセンサーや地磁気センサを搭載することが殆どですので今回はそれに則ります。 ここから先を読み進める際の注意点です  ベクトルは向きと大きささえ変えなければどこに動かしても構わない モーターやロボットの図は全て省略されている（ベクトルしか書きません） 右上のモーターのみに注目して話を進めます（他の三つは全て省略します）この三点を踏まえて上の図を簡略化するとこうなります。（$\vec{v_1}$は今から求めるので記入していません。） すごくシンプルになりましたね。ではこの図を使って実際に導出していきましょう。 回転させて考える: 先ほどの図ではモーターの取り付け角が斜めになっていて式を立てる際にわかりにくいので、全部まるっと$\theta_1$だけ反時計回り（=負の方向に）回転させて$l_1$が$y$軸に重なるようにしてみます。 元々$\theta$の方向を向いていた$\vec{v}$を負の方向に$\theta_1$だけ回転させた$\vec{v’}$は$(\theta-\theta_1)$の方向を向いています。最初の図と比べると非常にシンプルになりましたね。 ベクトルの分解: ここまできたらあと少しです。$\vec{v’}$を$l_1$に水平な方向の$\vec{v’_y}$と$l_1$に垂直な方向の$\vec{v’_x}$に分解します。 この時三角関数を使うとこのように$v’_x,v’_y$を表せます。 [\begin{split}  v’_x&amp;=v\times\sin(\theta-\theta_1)  v’_y&amp;=v\times\cos(\theta-\theta_1)\end{split}]  🤔ここがよくわからない人へ三角関数入門をもう一回読んでみよう。 $l_1$とオムニホイールの関係を考えてみましょう。下の図は一番最初の図の右上部分を拡大した図です。 $l_1$はモーターの回転の軸なので、それと並行な$\vec{v’_y}$はサイドホイールの滑りを表します。サイドホイールは動かすものではなく滑るものなのでこちら側から制御することはありません。 対して$l_1$に垂直な$\vec{v’_x}$はオムニホイールの回転を表します。つまりこれがオムニホイールの速度$\vec{v_1}$を表します。 導出結果: 以上の計算は$\theta_n$を変えるだけでどのモーターにも適用できます。一般化すると [v_n=v\times\sin(\theta-\theta_n)] になります。この記事を読んでいる方のほとんどが割合（何%とか）でモーターの回転速度を制御すると思いますので、vには0%-100%を入れればOKです。  ガチ勢向け：割合ではなくちゃんと回転数で制御したい人各モータの角速度$\omega_n$はオムニホイールの半径$r$と$v_n$を使って以下のように表せます。（単位系は統一してくださいね！！！）$\omega_n=\frac{v_n}{r}$       4輪のロボットの具体的な式    見なかったことにする    X字で90°等間隔配置の場合$$v_1=v\times\sin(\theta-45^\circ)$$$$v_2=v\times\sin(\theta-135^\circ)$$$$v_3=v\times\sin(\theta-225^\circ)$$$$v_4=v\times\sin(\theta-315^\circ)$$      3輪のロボットの具体的な式    見なかったことにする    前開きで120°等間隔配置の場合$$v_1=v\times\sin(\theta-60^\circ)$$$$v_2=v\times\sin(\theta-180^\circ)$$$$v_3=v\times\sin(\theta-300^\circ)$$ コード例: Arduinoで実際に使える関数の例がこちらです。 radiansというのは私たちが日常で使う角度の表し方の60分法から、数学の世界で使う弧度法という角度の表し方に自動変換してくれるツールです。Arduino勢でない方も「60分法　弧度法　変換」などで検索するとすぐ引っかかると思います。 終わりに: いかがでしたでしょうか。簡単な説明ではありますがオムニホイール制御式を「理解して使う」ことを目的とした記事を書きました。 オムニホイール制御はぱっと見難しそうに見えますが、ベクトルと三角関数の概念が頭に入っていればすんなりと理解できるものだと思います。 もしわかりづらい表現などあればTwitterか、ブログメニューのContactページから教えていただければ対応します。 次はあなたがプログラムを書いてロボットを動かす番です。大会などで元気よくロボットが動く様子が見られることを楽しみにしています。 "
    }, {
    "id": 14,
    "url": "https://soradev81.github.io/20220628/",
    "title": "VSCode拡張機能",
    "body": "2022/06/28 - みなさんVisual Studio Codeを使っていますか。 単体だとタブ機能のついたメモ帳のようなものなのですが、拡張機能や設定などで自分好みに魔改造することができる素晴らしいエディタです。ちなみにこのブログの構築も記事の執筆もVSCodeを使ってます。 VSCodeを持っていない人はこちらからどうぞ。VSCode使えるとモテます。知らんけど。 Visual Studio Code (公式) 概要: 先ほど拡張機能を入れると便利になると言いましたが、白熊が「もうこれがないとコード書けない」というような依存級のものを厳選して紹介します。 #1 PlatformIO IDE: ArduinoやSTM32、ESP32などなど様々なマイコンを開発できます。インストールするだけで特に他の設定をせずにすぐにマイコン開発をスタートできます。 ちなみに2021以降に僕が製作したロボットのプログラムはほぼ全てPlatform IOを利用して書きました。 補完（≒予測変換）がぐいぐいきく気持ちの良い環境でマイコンを開発できるので最高です。マイコン開発する人は持っておいて損はない拡張機能です。Arduino IDEもいいですがぜひこちらの世界を覗いてみませんか👀 https://marketplace. visualstudio. com/items?itemName=platformio. platformio-idePlatformIO IDE - Visual Studio MarketplaceExtension for Visual Studio Code - Professional development environment for Embedded, IoT, Arduino, CMSIS, ESP-IDF, FreeRTOS, libOpenCM3, mbed OS, Pulp OS, SPL, STM32Cube, Zephyr RTOS, ARM, AVR, Espressif (ESP8266/ESP32), FPGA, MCS-51 (8051), MSP430, Nordic (nRF51/nRF52), NXP i. MX RT, PIC32, RISC-V, STMicroelectronics (STM8/STM32), T #2 GitHub Copilot: 天下のGitHub様に公開されているコードを機械学習し、AIが続きを補完してくれるというものです。 感覚としては「梅雨」まで打ったらAIが「梅雨も明け夏の暑さも本番となってまいりました。大変ご無沙汰しておりますがいかがお過ごしでしょうか。」くらいまで打ってくれるような感覚です。 GitHub Copilotと一緒だとコーディング作業がとても気持ち良くなります。これのおかげで情報処理の課題が一瞬で終わr【自主規制】 ずると勘違いされがちですがあくまで補助なので、プログラム書けない人にこれ渡しても何もできないと思います。勝手にやってくれるというより脳内に浮かんでるコードを代わりに打ってくれるエスパーみたいな存在です。アーニャ、プログラム代わりに打つます！！ 一般の方は利用に年$100かかる（60日間は無料試用できる）らしいですが学生は無料です。利用にはGitHubアカウントを持っている必要があります。 https://marketplace. visualstudio. com/items?itemName=GitHub. copilotGitHub Copilot - Visual Studio MarketplaceExtension for Visual Studio Code - Your AI pair programmer #3 Todo Tree: プログラムを書いているときに「次ここから書き始める」とか「注意：hogehoge」などというコメントを残したことはありませんか。それをより便利にしてくれる拡張機能です。 このようにあらかじめ設定しておいたキーワードをハイライト&amp;一覧表示してくれます。未来の自分へのメッセージがどこかを探す必要がなくなります。 https://marketplace. visualstudio. com/items?itemName=Gruntfuggly. todo-treeTodo Tree - Visual Studio MarketplaceExtension for Visual Studio Code - Show TODO, FIXME, etc. comment tags in a tree view #4 codic: 僕は所謂「英語のできない高専生」なので変数・関数名の命名に迷います。それをいい感じに翻訳してくれるツールです。 例えば「存在するか」と入力したら「exists」という提案をしてくれます。「時刻を取得」と入力したら「getTime」とサジェストしてくれました。いくつか候補を出してくれるので自分であった候補を選べるのも便利です。 利用にはこちらを参照してください。 https://marketplace. visualstudio. com/items?itemName=pizzacat83. codiccodic - Visual Studio MarketplaceExtension for Visual Studio Code - codic extension ではみなさんも良いVSCodeライフをお送りください。他にもお勧め拡張機能あったら教えてね。ばいばい👋 "
    }, {
    "id": 15,
    "url": "https://soradev81.github.io/20220621/",
    "title": "三角関数入門",
    "body": "2022/06/21 - sinα　cosβ　tanθ唐突に見せられたこの文字列を見て拒絶反応を起こしてる人いませんか？ 三角関数よりも他の学問を学ぶべきみたいなことを仰る方が実際にいるくらいですので、特に小中学生にはとてつもなくハードルが高い数学用語に聞こえているかもしれません。 勿論奥深くまで学ぼうとすると難しいのですが、表面に触れる程度であれば実はそこまで難しくなかったりします。 足し算・引き算・三角比という言葉がある#1ように、あらゆる学問の基礎・土台である三角比・三角関数についてこの記事で軽く学んでいきましょう。 概要 - Abstract: この記事では三角比とは何か？という初歩の初歩から三角関数の導入までを軽く扱います。また関数とは何か？などの三角関数を理解するために必要な知識も扱います。 記事の途中で理解度を確認するための練習問題もいくつか提示しました。三角比・三角関数が初めての人は練習問題（特に発展問題）すらもとても難しく感じるかもしれません。しかし一旦答えを見て理解してからもう一度解き直すということを何度も繰り返せば気づけば簡単に感じられるようになるはずです。 ではぜひ手元に紙とペンを用意して数学をお楽しみください。 対象読者:  ロボット製作にあたって数学につまづいている小中学生 高校卒業以降、三角関数を退け続けた人生を送っている方 ちょっと知的な読み物を欲している方（学生や動物園生#2の方、理系のお仕事されている方には簡単すぎて物足りない記事になっていると思います。） 必要知識: 小学校卒業程度の算数力に加えて正負の数の計算ができればOKです。中学校卒業以上の数学力があればより面白いかもしれません。 Note: 本編に入る前にこの記事で説明しないこと、省いて説明することをあらかじめ明示します。この項は読み飛ばしてもらって構いません。  弧度法には触れません。全て60分法で説明します。 もちろん正弦定理、余弦定理、加法定理等の説明もしません。 相似と比: ではここで三角定規を取り出してみましょう。正三角形の半分の形のやつです。 この時のそれぞれの角の大きさは30°, 60°, 90°ですね。 この三角形の斜辺（=斜めの辺）の長さを2とした時、対辺（=縦の辺）の長さは1、底辺（=横の辺）の長さは$\sqrt{3}(\fallingdotseq1. 7320508…)$になることが知られています。 これと同じ三角定規を友達に借りて2つ並べてみると正三角形になりますね。正三角形は全ての辺の長さが等しいです。つまり対辺はその正三角形の一辺の半分なので長さが1になります。 底辺が$\sqrt{3}$になる理由は神のみぞ知る領域#3なので今回は飛ばします。  👀補足説明：$\sqrt{3}$ってなに？例えば3を2回かけると3×3=9になりますね。この逆の計算を考えてみましょう。$a\times a=9$とするとき$a$の値は何になるでしょうか。$a=±3$ですね。（正の数だけでなく、負の数同士の積も正になることに注意）では$b\times b=3$とするとき$b$の値は何になるでしょうか。これは計算していくと$b=±1. 7320508…$と無限に続いていきます。どこかで割り切れるというようなことはありません。この例のように2回かけたら$x$になる数字を表す記号として$\sqrt{x}$（読み：ルート）が用意されています。例えば先の例の±1. 7320508…という数字は$±\sqrt{3}$と表すことができます。例: $\sqrt{9}=3,\sqrt{3}=1. 7320508…$（この説明がよくわからなかった人は記事中の$\sqrt{3}$を全て1. 7320508…に置き換えて読んでも大丈夫です。） ここで比という概念を持ち出してみましょう。この三角定規の斜辺：対辺：底辺の比は [2:1:\sqrt{3}] になります。以降これを辺の比と言うことにします。 この例のように「大きさは違うけど形は同じ」ということを数学の言葉で相似といい、S字フックのような記号で表します。  形が同じものは大きさが違っても裏返ってても向きが異なっても相似である 縦横に引き伸ばされたようなものは形が違うので相似ではない そもそも違う形状ももちろん相似ではない 相似の図形同士には以下が成り立ちます  辺の比は変わらない 対応する角の大きさは変わらない逆にこのことから対応する角の大きさが等しい図形同士は相似であると言えます。 したがって、対応する角の大きさが全て等しければ辺の比も等しくなります。　←超重要①  🤔この説明がちょっと難しかった人へ小学校6年生の算数の教科書の「図形の拡大と縮小」のページを読み直してみよう。 この相似の概念を頭に入れた状態で次の図を見てください。この部分がこの記事の要であり一番重要なところです。 三角形の内角の和は180°です。直角三角形の3つの角のうち1つは90°、もう一つを$\alpha^\circ$（アルファ）としたとき残りの一つの角は [\begin{split}180^\circ-90^\circ-\alpha^\circ=(90-\alpha)^\circ\end{split}] となります。つまり直角三角形の場合は 2つある直角でない角のうち1つでも定まればもう一つも定まり、全ての角の大きさが定まります。　←超重要② 超重要①と②から「$\alpha^\circ$が等しい三角形同士の辺の比は等しい」と言えます。つまり$\alpha^\circ$さえ与えられれば辺の比を求められます！ この章のPoint:  相似の図形は対応する角の大きさが等しく、辺の比は変わらない 直角三角形では直角でない1つの角が同じ直角三角形同士は相似になる 三角比: とある偉い人が「$\alpha^\circ$が等しい直角三角形同士は必ず相似であり、辺の比も等しい」ということは「$\alpha^\circ$をもとに三角形の辺の比を表せるのでは…？」と考えました。 これが本日のお題、三角比です。 この図を使って$\alpha^\circ$の三角比を実際に求めながらsin, cos, tanと学んでいきましょう。 sin: 斜辺の長さに対する対辺の長さはsinを使って表します。 この例だと、$\alpha^\circ=30^\circ$で斜辺は2、対辺は1なので [\begin{split}\sin{\alpha^\circ} &amp;= \sin{30^\circ}\ &amp;=\frac{1}{2}\end{split}] となります。言いかえると、sinとは斜辺の長さを何倍すれば対辺の長さになるかなので、もちろん斜辺の長さに$\sin{\alpha^\circ}$をかけると対辺の長さになります。 [\begin{split}斜辺\times\sin\alpha^\circ&amp;=2\times\sin{30^\circ} \&amp;= 2\times\frac{1}{2}\ &amp;=1\end{split}] cos: 斜辺の長さに対する底辺の長さはcosを使って表します。 この例だと、$\alpha^\circ=30^\circ$で斜辺は2、底辺は$\sqrt{3}$なので [\begin{split}\cos{\alpha^\circ} &amp;= \cos{30^\circ}\ &amp;=\frac{\sqrt{3}}{2}\end{split}] となります。sinと同様にcosとは斜辺の長さを何倍すれば底辺の長さになるかなので、斜辺の長さに$\cos{\alpha^\circ}$をかけると底辺の長さになります。 [\begin{split}斜辺\times\cos\alpha^\circ&amp;=2\times\cos{30^\circ} \&amp;= 2\times\frac{\sqrt{3}}{2}\ &amp;=\sqrt{3}\end{split}] tan: 底辺の長さに対する対辺の長さはtanを使って表します。 この例だと、$\alpha^\circ=30^\circ$で底辺は$\sqrt{3}$、対辺は1なので [\begin{split}\tan{\alpha^\circ} &amp;= \tan{30^\circ}\ &amp;=\frac{1}{\sqrt{3}}\end{split}] となります。sin, cosと同様にtanとは底辺の長さを何倍すれば対辺の長さになるかなので、底辺の長さに$\tan{\alpha^\circ}$をかけると対辺の長さになります。 [\begin{split}底辺\times\tan\alpha^\circ&amp;=2\times\tan{30^\circ} \&amp;= \sqrt{3}\times\frac{1}{\sqrt{3}}\ &amp;=1\end{split}] これで一通り30°の三角比を求めることができました。まとめてみましょう。 [\begin{split}\sin30^\circ &amp;= \frac{1}{2} \ \cos30^\circ &amp;= \frac{\sqrt{3}}{2} \ \tan30^\circ &amp;= \frac{1}{\sqrt{3}}\end{split}] 基本問題: 下の図を用いて$\sin\alpha^\circ, \cos\alpha^\circ ,\tan\alpha^\circ$の値をそれぞれ求めよ。 答え（ぼかしをタップするとみれます） $\sin\alpha=\frac{3}{5},\cos\alpha=\frac{4}{5}, \tan\alpha=\frac{3}{4}$ 発展問題: 練習問題 #1の図を用いて$\sin(90^\circ-\alpha)$の値を求めよ。 答え（ぼかしをタップするとみれます） $\sin\alpha=\frac{4}{5}$       解説を詳しく見る    見なかったことにする  このように向きをひっくり返して考えてみましょう。 関数とは？: 関数とはパズルのことです！！！（？？？） 唐突ですが「3を足す$(x)=x+3$」という関数があったとします。これをイメージしやすくするとこんな感じです。 「3を足す」は関数の名前です。今回はわかりやすさのために日本語で書いてますが、普通はアルファベットを使います。（例: $f(x), g(x)$ ） $x$は「ここにピースをはめてね」という意味を表しています。「3を足す$x$」と書いてしまうとどこまでが関数の名前かわからなくなるのでそれを防ぐために括弧をつけます。 では試しに「8」のピースを当てはめて「3を足す$(8)$」の値を計算してみましょう。 関数のイメージは掴めましたか？関数を使うと入力（パズルのピース）と完成した式との関係を示すことができます。 このような式で$x$と$y$の関係を表せるとき、$y$は$x$の関数であると言います。「$x$が与えられたとき$y$がただ一つに定まる」ということです。 [y=f(x)] 難しい感じがしますが実は小学5年生「ともなって変わる量」の算数の単元でやっています。そうですね、おなじみ比例・反比例も関数として考えることができます。たとえば、 [□ =5\times○] という式があったとき$□$を$y$、$○$を$x$と考えると [y=5x] と表せます。$f(x)=5x$とすると… [y=f(x)] の形になりましたね。立派な関数であることがわかります。  🍰小学生向け補足説明算数の一歩先の数学の世界では掛け算をとてもよく使うので、文字と文字、または文字と数の計算であれば掛け算の記号「×」を省いて記すことができます。これはOK🙆:　$5x = 5\times x,　xy = x\times y$これはダメ🙅:　$53 = 5\times3$ 基本問題: 二つの関数$f(x)=5x+2,g(x)=\frac{10}{x}$があるとき、次の値を求めよ。 $(1)　f(5)$$(2)　g(3)$$(3)　f(2)\times g(5)$$(4)　\frac{g(2)}{f(4)}$ 答え（ぼかしをタップするとみれます）$(1)　27$　$(2)　\frac{10}{3}$　$(3)　24$　$(4)　\frac{5}{22}$ 解説: (1),(2)はそのまま$x$に当てはめるだけでOKです。(3),(4)はそれぞれの関数の値を求めてから計算してみましょう。       途中式を詳しく見る    見なかったことにする  (1)$$\begin{split}f(5)&amp;=5\times5+2\\ &amp;=27\end{split}$$(2)$$\begin{split}  g(3)&amp;=\frac{10}{3}\\  &amp;= \frac{10}{3}\end{split}$$(3)$$\begin{split}  f(2)&amp;=5\times2+2\\  &amp;=12\\  \\  g(5)&amp;=\frac{10}{5}\\  &amp;=2\\  \\  f(2)\times g(5)&amp;=12\times2\\  &amp;=24\end{split}$$(4)$$\begin{split}  f(4)&amp;=5\times4+2\\  &amp;=22\\  \\  g(2)&amp;=\frac{10}{2}\\  &amp;=5\\  \\  \frac{g(2)}{f(4)}&amp;=\frac{5}{22}  \end{split}$$ 三角関数: 数字を与えれば何か一つの数字がもとまる…なんかモヤモヤしませんか？ さっきやりましたよね？覚えてますよね…？ そうです、三角比ですね。（強引） しかし、ある致命的な欠点があります。90°以上の角が与えられた時に成立しないということです。 三角比の場合は90°までの角に対する値を定義していましたが、90°以上のすべての角に対して成立するように考え方を拡張してみます。ここからは三角関数の話です。 平面上に半径rの円を書き、こんな感じで角$\theta$（シータ）を書きます。 四分割した時の右上をエリア1として反時計回りにエリア2、3、4と呼ぶことにします。#5  😡発展：$\alpha$とか$\theta$とかギリシャ文字やめろや！！確かにギリシャ文字に慣れてない人は難しいかもしれないですが理由があります。トイレとかが詰まった時に使うやつのことをほとんどの人が「スッポン」というでしょうが、正式な名前は「ラバーカップ」と言います。でも名前が長いので言いにくいですよね。そこでみんながある程度共通して「スッポン」という略称を使います。このような感じで角を表す時には数学の世界では$\theta$をよく使います。他の記事や本を読んでる時に$\theta$が出てきたら多くの場合角のことを指しているはずです。式に使われる記号がその式の意味を教えてくれるわけです。$\alpha$に関しては何にでも使われがちな便利屋さんです。$x,y,z$くらいの軽いノリで使われます。誰でもいいから僕と結婚しよう！！って言ってる人とやってることは変わりません。この記事では三角比の話をしているときは$\alpha$、三角関数の話をしているときは$\theta$を使うことで混同を防ぎました。 この時のXは三角比でいう底辺に相当します。Yは対辺に相当します。円の半径rは斜辺に相当します。  🦊この説明がちょっと難しかった人へ小学4年生算数「ものの位置の表し方」のページを読み直してみよう。 このように考えると次のようにsin,cos,tanを定義できます。 [\begin{split}  \sin\theta&amp;=\frac{Y}{r}    \cos\theta&amp;=\frac{X}{r}    \tan\theta&amp;=\frac{Y}{X}\end{split}] 三角比との大きな違いはX・Yの取りうる値が負の数になることがあるということです。具体的にはXはエリア2・3では負の数に、Yはエリア3・4では負の数になります。 sin,cos,tanの定義から次のことが言えます。  $\sin\theta$はエリア1・2では正であり、エリア3・4では負になる。 $\cos\theta$はエリア1・4では正であり、エリア2・3では負になる。 $\tan\theta$はエリア1・3では正であり、エリア2・4では負になる。 基本問題: $\tan\theta=-\frac{4}{3}$で$\cos\theta=\frac{3}{5}$であった。この時の$\sin\theta$の値を求めよ。 答え（ぼかしをタップするとみれます）$\sin\theta = -\frac{4}{5}$       解説を詳しく見る    見なかったことにする  $\tan\theta$が負の数ということはθはエリア2かエリア4にある。$\cos\theta$が正の数ということはθはエリア1か4にある。この二つの条件を満たす必要があるので$\theta$はエリア4にある。したがって$\sin\theta$は負になる。$$\begin{split}  \cos\theta&amp;=\frac{X}{r}\\  &amp;=\frac{3}{5}\\  \\  \tan\theta&amp;=\frac{Y}{X}\\  &amp;=\frac{-4}{3}\end{split}$$したがって$X=3,Y=-4,r=5$である。$\sin\theta=\frac{Y}{r}$なので$$\begin{split}\sin\theta &amp;= \frac{-4}{5}\\&amp;=-\frac{4}{5}\end{split}$$（以上） 発展問題: $\tan\theta$を$\sin\theta$と$\cos\theta$を使って表せ。 答え（ぼかしをタップするとみれます）$\tan\theta = \frac{\sin\theta}{\cos\theta}$       解説を詳しく見る    見なかったことにする  $$\begin{split}  \sin\theta&amp;=\frac{Y}{r}\\  r\times\sin\theta&amp;=Y\\  \\  \cos\theta&amp;=\frac{X}{r}\\  r\times\sin\theta&amp;=X\\  \\\end{split}$$のように$\sin\theta,\cos\theta$を変形する。したがって$X=r\times\cos\theta, Y=r\times\sin\theta$である。$\tan\theta=\frac{Y}{X}$なのでX,Yにそれぞれ$r\times\cos\theta, r\times\sin\theta$を代入する。$$\begin{split}\tan\theta&amp;=\frac{r\times\sin\theta}{r\times\cos\theta}\\&amp;=\frac{\sin\theta}{\cos\theta}\end{split}$$（以上） 三角関数の用途: ここから先は理解することを目的としたものではなく「三角関数って身近にあったんだ！」という気づきを大切にする部分なのでサラッと読むだけで大丈夫です。 みなさん今日は電気は使いましたか？照明をつけたり、電子レンジで調理したり、エアコンをつけたり…などなど。それだけでもうあなたは三角関数のお世話になっています。 コンセントにくる電圧はプラスとマイナスが一秒間に60回#6切り替わる交流です。 この交流の式はこのような式になっています。 [e(t)=E_m \sin\omega t] 覚えておいてほしいのはこの式自体ではなく、三角関数がないと僕たちは電気を使うことはできないということ。 電気だけではありません。カーナビの位置表示や地図を作るときに行う測量、ゲームの計算や飛行機や船の航行、音楽など世の中あらゆるものに使われています。今この記事を読むために使っているスマートフォンやパソコンも三角関数に支えられています。 三角関数は身の回りに溢れています。 三角関数は決して一部の理系の人のためのものではありません。 おわりに: かなりの長文でしたが最後まで読んでくださってありがとうございました。初めてsin,cos,tanを見た人はとても難しく感じたかもしれません。しかしここまで読み切れたということに自信を持って良いと思います。 この記事を通して人間社会と三角関数は密接に関わっているということに気づいてもらえたら嬉しいです。 では、これから良い三角関数ライフをお送りください！👋 （万が一計算の間違い等あればDM等で教えていただければ幸いです。） 参考文献:  新基礎数学 - 大日本図書#1 あるわけない#2 高専生のこと#3 中学3年数学 三平方の定理#4 小学4年算数 縮図・拡大図#5 お気づきかと思いますがこれは第一、第二、第三、第四章限に相当します。#6 世界の中心は岐阜です。東日本は50回（=50Hz）らしい。 "
    }, {
    "id": 16,
    "url": "https://soradev81.github.io/20220430/",
    "title": "ベクトル入門",
    "body": "2022/04/30 - 唐突ですがベクトルというものをご存知でしょうか。英語ではvectorと言います。 高校生の方はもしかしたら数学の授業でやっているかもしれません。高専生の僕は夢の中にベクトルが出てくるくらいやらされている教えていただいているのですが、今日はそのベクトルについてのお話を珈琲でも嗜みながら書いていこうかなと。 概要 - Abstract: この記事では主にベクトルの概念と基礎計算を軽く扱います。またロボットにおけるベクトルの使い道の例を軽く紹介します。 この記事では解説にあたって「〇〇が理解できない場合、××の知識が足りないかも」というように、解説を理解するために必要な予備知識についても明示しました。もし読んでいる最中に理解につまづいたらそれも併せて確認してみてください。 小中学生のお友達がこの記事を読む場合、文字とかが多くて少しむずかしい！って感じるかもしれません。でもノートに書き出してみたり、算数・数学の先生や理科の先生に聞いてみたりすることで時間はかかるかもしれませんが理解できるようになるはずです。 対象読者:  ロボット製作にあたって線形代数を学んでみたい方 数学で背伸びしたい小中学生 学生に戻りたい大人の皆さん高校生、高専・大学生の方には簡単すぎて物足りないかもしれません。 Note: 本編に入る前にこの記事で説明しないこと、省いて説明することをあらかじめ明示しておきます。厳密な表現を求める方以外はこの項は飛ばしてもらって構いません。  複素数・複素ベクトルについては触れません。 2次元ベクトルのみを扱います。3次元以上のベクトルについてはこの記事では解説しません。 内積・外積には触れません。正直なところ厳密な表現を求めるほどガチな人はこの記事読まないとは思いますが…。 ベクトルとは?: 3, 12, π, $\frac{3}{5}$ などは一般的にスカラーと呼ばれます。中学生までの数学は基本的にこれを扱います。 スカラーは大きさの情報のみを持ちます。例えば、1は3よりも小さいです。πは$\frac{7}{5}$よりも大きいです。 これに対して大きさと向きの二つの情報をもつものをベクトルと言います。 例えば、重さや長さや時間などは共通の単位（kg, m, s）などをあらかじめ決めておくことで一つの実数で表すことができます。「体重が52kgだ」とか「家から学校まで500mある」などなど。いわばただの数値です。つまりこれらはスカラーです。 対して速度や力などは大きさだけではなく向きも表す必要があります。「敵艦隊が西に時速40kmで移動中」や「社長が部下へ圧力をかけた」なども向きが明確になっていますね。これがベクトルです。 例えば「岐阜駅から2km離れたところにいるから電車ついたらきてね。」と言われても「いや、北か南か東か西かどっちやねん！」ってなりますね。ちゃんと「岐阜駅から北に2km離れた店にいるね。」などと言ってもらえない限り辿り着くことは難しいでしょう。 普段意識することはありませんが、このように私たちの生活にはベクトルの概念が欠かせないものとなっています。 ベクトルの表記: では実際にベクトルを扱っていきましょう。 例としてベクトルOAを定義してみます。これは点Oを始点、点Aを終点とするベクトルを意味します。 このベクトルの長さのことをベクトルの大きさ、向いている方向のことをベクトルの向きといいます。  💡 この解説がうまく理解できない場合座標の概念の理解が足りていない可能性があります。方眼ノートに実際に手でこのベクトルの図を書いてみることをお勧めします。 ベクトルOAを文字で表す時には$\vec{OA}$のように文字の上に矢印をつけて表記します。 教科書や流派によっては矢印をつけずに太字にするだけだったりしますが、この記事では上に矢印を書く表記を採用します。大切なのは表記の仕方そのものではなく、それがベクトルかスカラーかのどちらかを常に意識することです。 では実際に数式を扱っていきましょう。$\vec{OA}$のx軸方向の距離は5、y軸方向の距離は3なので、 [\vec{OA}=\binom{5}{3}] と表します。この時、5と3のことを$\vec{OA}$の成分と言います。  Note: 教科書や参考書によっては  $ \vec{OA}=(5,3) $ という横向きの表記になっているかもしれませんが、意味は全く変わりません。 個人的には見やすさと行列の表記との整合性を踏まえると縦向きの方が分かりやすいと思います。 ベクトルの和: では実際にベクトルを用いて計算をしてみましょう。 [\vec{\alpha}=\binom{x_{\alpha}}{y_{\alpha}},\vec{\beta}=\binom{x_{\beta}}{y_{\beta}}] とするときこの二つのベクトルの和は次のように定義されます。 [\begin{split}\vec{\alpha}+\vec{\beta}&amp;=\binom{x_{\alpha}}{y_{\alpha}}+\binom{x_{\beta}}{y_{\beta}}\&amp;=\binom{x_{\alpha}+x_{\beta}}{y_{\alpha}+y_{\beta}}\end{split}] 文字や添字が多くなってきたことでこんがらがってきている人がいるかもしれません。まず一旦深呼吸してみましょう、そこまで難しくないはずです。 [\binom{◯}{□}+\binom{△}{☆}=\binom{◯+△}{□+☆}] こうすればどうですか？上の段同士、下の段同士を足す。これがベクトルの和の定義です。  💡 この解説がうまく理解できない場合文字と式の関係について理解できていない可能性があります。小学校6年生の算数「文字を使った式」について学習することをお勧めします。 ではこれを図示してみます。 平行四辺形の対角線になっていることに気づきましたか？ このようにベクトルを使うとすごくシンプルに図形の計算ができるようになることを実感できたと思います。 練習問題: [\vec{A}=\binom{5}{3},\vec{B}=\binom{4}{2},\vec{C}=\binom{1}{7}] の時、次を求めよ。 $1. \quad\vec{A}+\vec{B}$$2. \quad\vec{A}+\vec{C}$$3. \quad\vec{B}+\vec{C}$ 答え（ぼかしをタップするとみれます）$1. \quad\binom{9}{5}$　$2. \quad\binom{6}{10}$　$3. \quad\binom{5}{9}$　  💡 この問題がうまく解けない場合和の計算方法やベクトルの概念が理解できていない可能性があります。少し戻ってもう一度読み直してみましょう。 もし時間と余力があるなら余った方眼紙に今やったベクトルの計算を図示して平行四辺形の対角線になっているかを確認してみましょう。これでベクトルの和はバッチリですね👌 逆ベクトル: 図を見れば一目瞭然だと思います、矢印の長さは同じだけど向きが正反対。記号は単純に-をつけるだけです。 少し頭を捻って考えてみると、ベクトルの引き算は逆ベクトルを足すことと言えます。 [\vec{A}-\vec{B}=\vec{A}+(-\vec{B})]  💡 この解説がうまく理解できない場合負の数（マイナスがつく数）の足し算、引き算、掛け算、割り算を理解できていない可能性があります。中学校1年生の数学の単元「正負の数」を学習することをお勧めします。 スカラー倍: スカラー倍のイメージはこちらです。向きは変わらず長さが変化します。ただし掛ける数が負の数の場合は向きが逆になることに注意してください。 [\begin{split}k\vec{A}&amp;=k\binom{x_{a}}{y{a}}\&amp;=\binom{kx{a}}{ky{_a}}\end{split}] 実際にやっている計算は上の式のようにベクトルのそれぞれの成分に掛け算するだけです。 注目ポイントは、文字$k$には矢印がついていませんね。つまり$k$はベクトルではなく実数です。つまりこのスカラー倍とはベクトル同士の掛け算ではありません。  編集 2022/05/01 $k\in\mathbb{R}$に関する記述が初心者にはちょっと分かりにくそうだったので表現を改めました。また誤解を防ぐため「掛け算」の単語を「スカラー倍」に改めました 総復習問題: #1: [\vec{A}=\binom{6}{1},\vec{B}=\binom{-5}{3},\vec{C}=\binom{2}{4}] とするとき、次を求めよ。 [\begin{split}&amp;1. \quad2\vec{A}-3\vec{B}\&amp;2. \quad\vec{A}+\vec{C}-2\vec{B}\&amp;3. \quad4(\vec{B}+2\vec{C})\end{split}] 答え（ぼかしをタップするとみれます）$1. \quad\binom{27}{-7}$　$2. \quad\binom{18}{-1}$　$3. \quad\binom{-4}{44}$　  💡この問題がうまく解けない場合ベクトルの足し算とスカラーとの掛け算がうまく理解できていない可能性があります。また「ベクトルの引き算」が「逆ベクトルを足すことと同じである」ということを理解できていない可能性があります。少し戻ってもう一度読み直してみましょう。 #2: 次のとき、$x,y$に入る数を求めよ。 [\binom{5}{y}+2\binom{x}{\frac{1}{2}x}=\binom{9}{6}] 答え（ぼかしをタップするとみれます）$x=2,y=4$ #2の解き方: [\begin{split}\binom{5}{y}+\binom{2x}{x}=\binom{9}{6}\end{split}] 従って、 [\begin{cases}5+2x&amp;=9\y+x&amp;=6\end{cases}\x=2,y=4]  💡この問題がうまく解けない場合ベクトルの足し算とスカラーとの掛け算がうまく理解できていない可能性があります。また中学校2年の数学「連立方程式」を理解できていない可能性があります。 ロボットの制御でベクトルが役立つ部分: 例えばオムニホイールを用いたロボットを制御したいとします。ロボカップジュニアでも上級者が使うことも多いですね。 オムニホイールとは？: 車輪の外周に小さな空回りする車輪を多く備えた特殊な車輪です。モーターの回転方向に対しては普通の車輪のように振る舞いますが、回転方向と垂直の向きには滑るという性質を持っいます。このホイールを3つ以上のモーターと組み合わせて使うことでロボットが向いている方角を変えずに全方向に移動することが可能になります。 やってみよう: 今回はこのように90度づつに4つ配置したモデルで考えてみます。 では下の図のようにモーターを矢印のように回転させたらどのように動くでしょうか。 直感的には前に進むというのがなんとなくわかると思います。これを直感ではなく数学的にベクトルを使って説明してみましょう。 モーターの回転によって生まれる橙色の矢印で示した力のベクトルを足し合わせてみましょう。すると足し合わせたベクトルは前向きを向いています。つまりロボットは前進します。 このような考え方をしていくことで45度刻みでなくても、360度どの方向でも好きな方向に進むように制御ができるようになります。右に進みながらちょっと後ろに進むといったような絶妙な制御もお手のものです。 終わりに: この記事ではベクトルの性質や使用方法まで詳細には扱いませんでしたが、この記事を通して今まで使ったことのなかったベクトルについての概念やイメージを掴んでいただけたら幸いです。 オムニホイールの移動についても実際に計算しようとなると三角比の知識が必要になってきますが、それよりもまずは脳内でベクトルのイメージを持つことが大切です。このイメージさえ持っていれば三角比について学んだ時にスムーズにオムニホイール制御を理解できると思います。 僕自身も線形代数の”せ”も理解できていない程度ですが、この記事がこれから線形代数を学び始める人のとっかかりにでもなってくれたら嬉しいです。 ではまた✌️ （計算の間違い等あればDM等で教えてほしいです。修正します。） 参考文献:  新線形代数 - 大日本図書 機械学習のエッセンス - 加藤公一"
    }, {
    "id": 17,
    "url": "https://soradev81.github.io/20220428/",
    "title": "全国大会2022@京阪奈",
    "body": "2022/04/28 - こんばんは。 4月23,24日はロボカップジュニアの全国大会でした。僕はRoot41（WSL053）としてSoccer Lightweightリーグに出場しました。大学受験と被るのでハジメくんと出場できる最後のシーズンです。 この記事の概要:  振り返り 良かった点・反省点 謝礼調整日: 壱号機は既に完成してハジメ君に引き渡してキーパー機はいい感じに動いていました。 弍号機は僕が調整日の前日に寮で調整してた時は結構いい感じに回路や駆動系統も動いていました。あとは細部を数箇所半田付けして、ソフトウェアを大会会場で微調整するだけという状態でした。 この細部を数箇所半田付けの作業の時にハンダ吸い取り線で電源安定用のコンデンサと+3. 3Vラインをショートさせてしまいました。疲れによる凡ミスを調整日の朝にやらかしました。 お亡くなり電子部品リスト😈       STM32F446RE（メインマイコン）   × 1       STM32L010F4（ラインセンサ監視マイコン）   × 4       CD74HC4067（マルチプレクサ）   × 4   メインマイコンは予備と交換して蘇生させました。ラインセンサ監視マイコンとマルチプレクサは予備が足りなく（2個づつしかなかった）諦めるしかありませんでした。 とは言ってもラインが全く読めないままでは試合に出れないので調整日の夜にラインセンサを並列にまとめてメインマイコンに直接繋ぐ作業を徹夜でしました。相方がそれに合わせたプログラムも急遽作成してくれました。なんとか当日には間に合ったのでよかったです。 車検: RCAPのような厳しい車検を想像していたので結構戦慄していたのですが、いつも通りの全国の車検という感じでした。RCAPが外れ値だったようです。 バッテリー検査も初体験でしたが問題ありませんでした。普通に準備すれば普通に通るそんな車検だった印象があります。 重量がキッカー有り機が約970g、キッカーなし機が約910gで重量は余裕でした。ボール補足センサ、ラインセンサからの光漏れも常識的な範囲内であれば問題ありませんでした。 車検の時にもスタッフの皆さんに「軽いね」「モーターがなめらかだね」「かっこいいね」などなど言っていただけてとても嬉しかったです。ハード担当はこの瞬間のために生きているまであります。 試合: 1. vs GR7（岐阜）: 3:2で勝利しました まさかの最初から岐阜ブロック同士で当たるとは思っていなかったのでびっくりしました。突貫工事の弍号機の姿勢制御のブレが非常に目立つ試合でした。キーパー機のブロックに何度か助けられなんとか勝利。 GR7の2人は普段から岐阜ブロックで仲良くしてくれていました。楽しかったです、ありがとうございました😆 2. vs トライペガサス（四国）: 8:0で勝利しました トライペガサスさんのロボットが1台故障状態でキーパー機がいなかったので、ボールを確実にゴール前に持って行きさえすれば点数が入る試合でした。しかしここでも姿勢制御の乱れのせいで何度かチャンスを逃したりしました。 回り込みの不確実性が目立つ試合でしたが改善点を多く得られた試合でした。対戦ありがとうございました🔥 3. vs デンソー工業学園（東海）: 2:3で負けました でもBLDC機でここまでロボカップらしいハラハラする試合を楽しめたのはこの試合が初でした。めちゃくちゃ楽しかったです。 デンソーさんとはRCAPぶりに会うことができました。前半2点入れられてこの調子で勝利を目指す…ところでしたが、電池交換の際にキーパー機のLi-Poに通じる電源線が不安定になっていることに気づきました。 不安定なだけなので試合に出そうと思えば出せるのですが…爆弾Li-Poを扱う以上ハード担当としてこの機体を出場させるわけにはいかず故障扱いにしてオフェンス機だけで後半を戦いました。キーパー機がいないのでゴール前がガラ空きになり点を入れられてしまい負けました。 1台出せなかった悔しさは否めませんが、この判断に関しては後悔はないです。不安定になってしまうロボットを作ってしまったのは自分です。 デンソーさんは大会期間中にたくさん交流してくださってとても楽しかったです。いつもTwitterを見てくださっているとのことでとても嬉しかったです。 対戦と交流ありがとうございました✌️ 4. vs 宗高グラジオラス（九州）: 3:3で引き分けました。 姿勢制御が安定していればあと1点入りそうな場面がありました…。でもとても楽しかったです。やっぱり安定しているロボットが一番強いです。 すこくよく作り込まれたロボットでとても感動しました。対戦ありがとうございました😎 5. vs Kollagen（埼玉）: 1:0でなんとか勝ちました。 いつもTwitterで交流してくださっているUserさんと試合できて試合前からとてもワクワクしていました。僕たちのロボットの調子が急に悪くなってしまいましたが辛うじて1点決めることができました。 Twitterの写真じゃなくて生の実物を見ることができてとても嬉しかったです。ありがとうございました😋 6. vs GUJO ROBO（岐阜）: 5:2で勝利しました。 小学生の頃からずっとライバルだったチームとの対戦になりました。ロボットの調子も良く、うまくボールをゴールに運ぶことができ5点決めることができました。 全方位カメラを利用したシュートを決められてしまいましたが、相手チームなのにおもわず称賛してしまうほどかっこよかったです。 かっこよかった！ https://t. co/WU2r99Zfoo &mdash; しろくま🥒胡瓜 Blend (@robokichi41) April 24, 2022ちなみにこの全国大会での勝利はこの試合が最後となりました。最後の勝利がGUJO ROBOなのも何か縁を感じますね。 今まで仲良くしてくれて本当にありがとうございました🙏 7. vs KORRDET（東海）: 0:4で負けました。 アウトオブバウンズとオウンゴールが非常に痛かったです。それと疑いようもなくKORRDETさんがめちゃくちゃ強かったです。 日頃からたぬきさんとTwitterで交流していたのもあってとても楽しかったです。対戦ありがとうございました😁 8. vs Reckless（東海）: 1:6で負けました。 前半1点入れてこのまま後半守り切れば勝利…のはずでしたが、後半でスイッチの押しミスを連発。ロボットが全然出せずに6点一気に入れられてしまいました。大会後に確認したところスタートスイッチの接点不良が見つかりました。 何が起こるかわからない、それがロボカップジュニア。対戦ありがとうございました🥳 9. vs All_outlook（関東）: 最終試合 13時45分より＿人人人人人人人＿＞　All_outlook　＜￣Y^Y^Y^Y^Y^Y￣@All_outlook &mdash; しろくま🥒胡瓜 Blend (@robokichi41) April 24, 2022All_outlookはとても仲のいいチームなので、最終試合で対戦できてとても嬉しかったです。1日目終了時点での対戦成績が同じだったのでもしかしたら…と思ってたら当たりました笑 0:5で負けてしまいましたが、自分達のしたかったロボットの動きは満足にできたので後悔はないです。むしろとても見応えある試合だったと思います。 試合後に記念撮影もしました。All_outlookの皆さん対戦&amp;交流ありがとう！ 交流: お菓子配り@ Day 2 pic. twitter. com/24kdjqx8G9 &mdash; しろくま🥒胡瓜 Blend (@robokichi41) April 23, 2022全国大会での大きな楽しみの一つ、交流もバッチリおこなってきました。こんな感じでお菓子置いておけばみんな来るかな…と思ったのですがみなさん意外と大人でした（汗 Rescue Mazeの方にも交流？視察？ヤジ？に行ってきました。 Twinclueさん、Orionさん、SUNAOさん交流ありがとうございました😸 All_outlookとごはん: RCAPの味噌かつに続いて、今回もAll_outlookとご飯に行きました。赤から鍋です。辛かったですがすごく美味しかったです😋 普段食べないような部位のお肉だったりととてもいい体験にありました。また行こうね！  終わりに: サッカー競技最後の全国大会となりましたが自分達のやりたかったBLDCでのサッカーは存分にできたので悔いはないです。やっぱりRoot41は最高のチームだったと思います。 小学2年の時からやってきたSoccer Lightweightを離れ、僕はこれからはRoot41ではなくBlendとしてRescue Mazeを頑張ります。さよなら&amp;ありがとうサッカー⚽️👋 さいごに、 今まで僕たちの活動を応援・支援してくださった全ての皆さん、大会の運営に携わったみなさんに感謝申し上げます。ありがとうございました。 "
    }, {
    "id": 18,
    "url": "https://soradev81.github.io/20220425/",
    "title": "GWLT@2022告知",
    "body": "2022/04/25 - こんばんは。 昨日までの三日間の全国大会お疲れ様でした。僕たちがRoot41として出場する全国大会はこれが最後になりました。とても楽しかったです。全国大会振り返り記事は今書いているところなのであと数日お待ちください…。 交流もとても楽しかったです。パドックにお菓子もらいにきてくださった皆さんありがとうございました。みなさんとお話しできてとても楽しかったです。 GWLT@2022 開催決定: 全国大会直後の今、たくさんの刺激を受けたことで新年度のロボット製作に向けての気持ちが燃え上がってることと思います。今炎上🔥しているそのモチベーションを起爆💣💥できたらという目的で企画します。 概要:       日時   5月8日（日） 9:30 - 12:00       開催方法   Zoom, Discordなど（未定）       対象   人間とその他哺乳類の皆さん       発表時間   7分以下（参加人数により変更になる場合があります）   発表内容のジャンルについては問いません。全国大会の短い期間では語り尽くせなかった自分のロボットの注目ポイントなど What is LT?: LTとはLightning Talkのことで発表・スピーチ・プレゼンというよりは文字通りトーク・雑談に近いものです。ちょっと共有してみたい知見・経験・体験をシンプルに話してみましょう。 今回のLTでは小学校や中学校の美術の時間にやったような（やってないかもしれない）作品を見た人に一言づつ書いていって最後に渡し会う的なプリント？を用意しようと思っています。やっぱり褒められたりリアクションもらえたら嬉しいしモチベーションも上がりますよね。 参加フォーム: こちらに用意しました。締め切りは4月30日00:00（=4月29日24:00）とします。申込期間短くて申し訳ないです。もし参加の可否が締切日までに確定しないという方はDMかメールshirokuma. 89@icloud. comまでお知らせください。柔軟に対応できます。 参加フォームはこちら（Google Forms使用） では、参加楽しみにお待ちしております。またね👋 "
    }, {
    "id": 19,
    "url": "https://soradev81.github.io/20220421/",
    "title": "全国大会出発前日",
    "body": "2022/04/21 - こんばんは。 明日は全国大会調整日ですね。僕たちRoot41の調子は…会場へついてからのお楽しみです。 今は死に物狂いでロボットの調整をしています。今日含めてRoot41の活動はあと4日。辛くても大変でも眠くてもやるしかありません。僕にはロボットしかないので。 なぜ今ブログを書いているのか: 昨晩からずっと「メインマイコンが起動しなくなっちゃった問題」と闘っていて白熊のメンタルがやられちゃったからです。つい先ほど解決したのですが…もう精神はボコボコです🙃 このまま作業を続けると真面目に精神崩壊しそうなので今ブログを書いています。とはいっても作業を再開しないといけないのであまり長くは時間は割けませんが… 大会でやりたいこと: 僕が大会で得たいこと・達成したいことをちゃんと大会前に明確にしておきます。成績の目標のことではありません。 交流: これは絶対にしたいです。いろんなロボットをたくさん見たいです。ロボットを製作する点で一番難しかったところとか苦労した点なども色々聞いてみたいしこちらからもシェアしたいと思っています。 Root41の眼鏡かけてない方（コンタクトレンズ）の人がいたら僕です。ツーブロックなので目立つかもしれません。ぜひ話しかけてください。いっぱいお話ししましょう🔥 他競技も見る: Blend発足にあたってRescue Mazeをはじめとする他の競技も見たいと思っています。 今まで色々ロボットを作ってきて、最近やっと僕が好きなのは「ロボットを創ることそのもの」であることに気づきました。生でいろいろな競技を一気に目にできる機会はおそらく全国大会以外にないでしょうから、サッカーだけでなく他の競技も知りたいし見てみたいなと思っています。 寝る: ちゃんと、ホテルのふわふわベッドで寝る幸せを体験したいです。次の日ちゃんと活動するために最低でも6時間の睡眠は確保したいですね。ちなみにこれには「深夜作業をしなければいけないほどのタスクを抱えない」という目標が含まれています。 壊れない魔法: ロボットが壊れない魔法をご存知の方いたら教えてください。もう苦い思いはしたくないです、お願いします🙏 Let’s 荷造り: では明日の朝出発なのでもうそろそろ服をしまおうかなと思います。ではおやすm…いえ、作業頑張ります😎 "
    }, {
    "id": 20,
    "url": "https://soradev81.github.io/20220410/",
    "title": "岐阜ブロック交流会",
    "body": "2022/04/10 - こんばんは。 今日は郡上八幡で岐阜ブロック交流会があったので、今日はそのお話です。 まえがき: 岐阜ブロック大会が延期を重ねて今日やっと実施されました。既に確定済みの4月末の全国大会の選抜には影響はなく、実質的には交流会でした。しかし、全国大会前に大戦で試合ができる最後の機会なので決して気は抜けません。 会場は郡上八幡だったので朝早く起きて高速バスで郡上まで向かいました。久しぶりの大自然&amp;遠出で花粉さえなければとても気持ちよかったです。 そもそも2台揃わない: 全国大会まで2週間を切っている状態でロボットを2台揃えることができないという本当にまずい状況です。もうこればかりはやるしかないので毎日頑張って半田付けをしています。 ちなみに旧機体は完全に分解しました。部品を一部回収する必要があるためです。必要な部品は僅かなので分解せずに新規購入で調達ということも考えましたが、「最悪旧機体出せばいい」などという甘い考えを完全に断ち切るために分解することにしました。 👧👦「ロボットってなにでうごくの〜？」🐻‍❄️「血 　と　汗　と　涙」（号泣） &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) April 9, 2022　 いざ勝負: 成績は正確な数字は覚えていませんが下から数えたほうが明らかに早かったのは覚えています。出せるロボットが1台しかないので仕方ないと言えば仕方ないのですが、2台揃えられなかったのは僕のハードウェアの遅れが原因なのは間違いありません。 ラインの処理もうまくいかずアウトオブバウンズを連発しました。サブマイコンのファームウェアを修正する必要があることがわかりました。また、ボール追従の精度もあまり良くありませんでした。 しかし悪い点ばかりだったわけではありません。悩んでいたI2C暴走問題は今日の試合では1回も発生しませんでした。無事解決です。また一回ブラシレスモータの調子が悪くなったことがありましたが、足回りを容易に着脱できるように設計したおかげで15分ほどで修理できました。メンテナンス性の良い設計は大切です。 ペースが遅すぎるのは否めませんが確実に一歩づつ進んでいる手応えはあります。 なんか動いてる pic. twitter. com/AxzQi2X3rX &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) April 10, 2022　 全国大会までにやるべきこと: 　: 優先度: 最高:  ラインセンサのファームウェア修正 姿勢制御の安定化ラインセンサに関しては見逃しが稀に発生しているので、サブマイコン側で反応したセンサは一定時間はHIGHをメインマイコンに送り続けるように修正しようと思っています。姿勢制御は努力で解決します。 優先度: 高:  ボール追従 Li-Poの追加調達点を入れるのはアタッカーなのでまずは回り込みを一定の水準まで持っていきたいです。Li-Poに関しては予備がちょっと欲しいくらいのお気持ち。 優先度: 中:  キッカーの実装 カメラ処理（ゴールキーパー） 予備部品の切削これがあれば得点率大幅UPが見込めるので前年度の回路を流用する形で実装します。 優先度 : 低:  NeoPixelカバーの切削見た目をよくするための部品なので正直なくてもいいです。でもやっぱりつけたいからとりあえずちゃんと動いてからですね。 まだ舞える: 今日1日で僕たちになにが足りないかがより明確になったと思います。逆に言えばそこさえ改善すればうまく動くかもしれないということです。云うなれば一筋の光かもしれません。 僕たちがRoot41を名乗れるのもあと14日です。2016年結成なので、小学校在学期間とほぼ同じ時間を相方と一緒に頑張ってきたわけです。Root41として全国大会に参加するのも最後ですし、僕はBlendのメンバーとしてRescue Mazeに移行予定なのでサッカー競技自体も最後です。 あと二週間はもがき続けます。最後の全国大会、成績はもちろんですが悔いのない試合ができるように頑張ります。 　: まだ10時台ですがもう心身の疲労が結構溜まってるので記事の執筆もこの辺で手を止めて寝ることにします。明日の朝日も綺麗でありますように。では👋 "
    }, {
    "id": 21,
    "url": "https://soradev81.github.io/20220329/",
    "title": "新ブログ移行",
    "body": "2022/03/29 - お久しぶりです。 約1ヶ月の改修の期間を経て白熊のブログが新しく生まれ変わりました。 ごあいさつ: この度ブログを改修し「そらのサイト」というタイトルでオープンいたしました。 小学生の頃に無地の自由帳を学校に持って行っていた人は少なくないと思います。真っ白の自由帳から新たなアイデアや経験がどんどん生まれていく、わくわくに満ちた体験をこのブログでもう一度できたらと思いこのタイトルにしました。 改修した目的: 主に以下の3つです。  ロードを軽くしたかった よりシンプルなデザインにしたかった iPadからでも執筆できる環境を整えたかった改修前のブログは背景に和紙の画像を用いていたりと色々と凝りすぎていた部分があり、ロードが非常に重いという問題がありました。ごちゃごちゃとしていたため「記事を読む」という体験にフォーカスできていなかったのが事実です。 そこで今回はとてもシンプルなJekyllテーマを採用しました。Gatsby. jsやHugoなど色々と手を出して見たりはしましたが、結局は前と同じJekyllに落ち着きました。「GitHub Actionsを自分で構築する必要がない」という強力なメリットを手放せなかったからです。 iPadからの執筆という点で当初はNotionと連携させてブログを書けるようにしようと思い、NotionAPIを利用して記事をインポートするプログラムを作ってみたりはしましたが、GitHub Actionsで手こずってしまい未だ未実装です。もはやvscode. devで正直十分な気もしています。 コンセプト: 新しいブログのコンセプトは  誰でも読みやすい 技術系の人でなくても楽しめるです。技術解説記事ばかりではなく、日常のさまざまなことをテーマに書いていく予定です。珈琲、紅茶などでほっと一息つきながら読んでもらえたらと思っています。 前ブログの記事の移行: 非常に大変なので全ての記事を移行することは難しそうですが、閲覧回数の多かった記事から優先的に移行していく予定です。 前ブログはコンセプト云々より「まずはとにかく記事を書いてみる」という感じだったので乱れた文章や語句が多かったのも事実です。そのため移行の際に、表現や文体を新ブログのコンセプトに合うよう修正することがあるとは思いますがご了承ください。 なお、もし優先的に移行してほしいという記事がありましたらContactのページを用意しましたのでそちらからお伝えいただけると幸いです。 　: ではこれから頑張って更新していきたいと思います。それではまた！ "
    }, {
    "id": 22,
    "url": "https://soradev81.github.io/20220206/",
    "title": "RCAPとその以後",
    "body": "2022/02/06 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 こんばんは。 11月にRCAP(ロボカップアジアパシフィック2021)がありました。我々Root41もこちらに参加しました。それについての記事です。 記事かくの遅くない？: RCAPは11月開催だったので単純に数ヶ月も経っています。一般には思い出話になりかけてくる時期ではありますが以下の理由でこのタイミングでの執筆になりました。  RCAP以後の自分の変化を知りたかった RCAPが終わった勢いで記事を書くのも違う気がしたこんな感じです。では書いていこうかなと思います。今回は写真などはほぼなく文字メインですが読んでいただけると嬉しいです。 大会前: 機体が全然大会に間に合いませんでした。主にハードウェアです。と言ってもハードウェアができないとソフトウェアもできないので両方できていませんでした。 まともに睡眠も取れていませんでした。RCAP前週の平均睡眠時間をiPhoneのログで今振り返って確認してみたら3時間55分でした。学校にも髪ボサボサ作業服状態で登校して、講義中も最前列の席で圧着作業やロボットの組み立てしたりと周りからしたら相当なホラーだったと思います。 二号機できたや &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) November 23, 2021 このツイートは投稿時間からもお察しですが確か2徹目の日のツイートだった気がします。日本語ももうおかしくなっていますが、これは2号機ができたという幻想が見えただけでロボットなど何も組み上がってませんでした。（確かこの次の日の夜で耐えきれなくなり床の上で砂浜にうちあげられた鯨のように寝ていました） それでも僕はロボットを作り続けました。 調整日: 調整日に会場入りしました。とりあえずなんとかハードウェアは形にはなっていたのですが、車検が普段より厳しめでその対策に非常に時間を食いました。ルールに準規するロボットを作ろうと心がけていましたが、まさかコンデンサや半固定抵抗の色まで規制されるとは思ってませんでした。 分解して色々車検対策してるうちに何故かメインマイコンがぶっ壊れ、そのあと次々に周辺回路がぶっ壊れていきました。まじでもう無理終わったと思いました。「なんでこんなに苦しいのにロボット作り続けてるんだろ」って何回も思いました。 みんな車検通ってびゅんびゅん走らせてるのを横目に、目の前の動かないロボットを修正していました。とみっくすさんがSTM32F446REを提供してくださったおかげでなんとか修正して車検を通すことができました。（本当にありがとうございました。） 試合: ボロボロでした！！！！！！ 去年のDCモーターロボ1機が戦力の99. 99%でした。それでも忍さんの鉄壁キーパーに何点か入れられたり、LEGENDさんと同得点だったりとなんだかんだ言って耐えてました。やっぱり安定しているロボットは強いです。（去年のロボはハードを爆速で組み上げたのでプログラムにめちゃくちゃ時間を割けていました。） 憧れのLEGENDさんとの試合後の写真です。まじでカッコよかったです😆 ただ頼みの旧機体が連戦で疲れて大会後半では調子が悪くなってしまったので負けては壊れて、壊れては負けてを繰り返しました。 そんな大会期間中も相方はずっと頑張ってプログラムを調整し続けてくれました。 がんばれ！がんばれ！ pic. twitter. com/Y1qOPZ4qqv &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) November 28, 2021 大会2,3日目になるとラッキー要素はかなり多いものの数得点入れることができました。ビッグフィールドの時にBLDCロボが群を抜く速さでボールに突っ込んでいった時はめっちゃ感動しました。 ※ちなみにその後すぐに白線外に出て審判に回収されちゃいました お泊まり: ホテルは基本的にずっとプログラムと修理してました。寝るタイミング=体力の限界って感じでした。モンスター飲んで頑張りました。そういえば大会期間中含めた2週間で僕はモンスターエナジー10本飲みましたね、もうあんなこと一生しないと心に決めました。 夕食は毎日All_outlookさんと一緒に食べました。大会期間中はめっちゃおしゃべりとかできてめっちゃ楽しかったです！  味噌かつも美味かった。また一緒に行こうね😋 交流: 試合での成果が皆無だった僕らでしたが、交流はめちゃくちゃ楽しかったです。NeoPixelとBLDCはウケてた気がします。BLDCロボを調整中とかにスタッフの方々が「えっ、動いたって？」みたいな感じで見に来てくれたりしたのも嬉しかったです。ありがとうございます。 「次会うときにはちゃんとBLDCぶるんぶるん走らせておきます！」と約束して会場を後にしました。 大会を通して気づいたこと: 原動力: 記事の初めの方にチラッと書いた「なぜロボットを作るのか」という問いとかかってきますが勝つためだけにロボットを作ってるわけじゃないということに気づきました。誤解されては困るので補足しますが、負けてもいいとか勝ちたくないと思ってるわけじゃないです。勝ち負けなんてどうでもいいと思ってるわけでもないです。勝敗は目標ではなく結果であると気づきました。 今シーズンだったら「もしBLDCでロボットを動かせたら革新的だろう」という希望というか信念というか夢というか…国語力皆無なのでうまく言い表せませんが、そういうのがずっと根底にあったんだと思います。3日連続徹夜とか普通に考えて肉体的にも精神的にも半端なくきついです。もし勝つことが第一目標なのであればBLDCロボなんて諦めてさっさと旧機体2台をリビルドして布団に突っ込むべきでしょう。徹夜どころか、モンスターエナジーを飲むことさえなかったでしょう。 でも僕たちはBLDCに挑戦し続けました。諦めたくなかったからです。なんとかしてでもカーペットの上をBLDCロボが走るところを見せたかったからです。 僕の夏休みはほぼ全てBLDCと線形代数の勉強に充てました。当時はオシロスコープなんて持っていなかったので専門の先生にお願いして研究室のオシロスコープを貸していただいたりもしました。休日はバスと電車で相方の家と高専を往復しました。相方も必死に動かないロボットを動かそうとしてくれました。 僕らRoot41は常に本気でした。 スケジュール管理だいじ: 開発スケジュールは完全にミスしたと思います。どちらかといえば立てた開発スケジュールの軌道から大きく外れたのが良くなかったです。完全にスタックオーバーフローしてたのでそのことにもっと早く（大会3,4ヶ月前くらい）から気付けていたら少しは違ったんじゃないかなと思います。 今年僕らはどこかのタイミングで気を抜いたり余裕ぶちかましてたりしたわけでもないので、年度の最初にちゃんと開発目標やスケジュールを共有し、開発段階に入ったらそれから早まっているか遅くなっているかを常に意識することが大事だと思いました。 安定こそ一番: 安定しているロボットが強いのは不変だなと思いました。忍さんやLEGENDさん、Oi-Dengikenさんなどなど故障や誤動作などが少なくてすごいなって思いました。やっぱり安定性っていうのはロボカップにおいて非常に重要なことだと思います。新たな技術に挑戦することもテクニカルですが、安定性を追求するのもテクニカルだと改めて気付かされました。 カロリーメイト美味しい: 昔は美味しくないと思っていたカロリーメイトの美味さに気づきました。大会数週間前から食事の時間さえも惜しかったのでカロリーメイト食べまくってたら美味しく感じるようになりました。（特急電車の中でこそっと食ったりしました。あんまよくないけど） モンスター美味しい: RCAPを通してモンスターエナジーは僕的には青のやつが一番好みだと分りました。RCAPのおかげですありがとうございm（違う 睡眠だいじ: もう徹夜なんて絶対しません。 「徹夜はするな。睡眠不足はいい仕事の敵だ。」この言葉の重みが苦しいほどよく分りました。 感謝など色々メッセージ: 運営・スタッフの皆さん: 大会期間中や大会前からいろいろな準備等ありがとうございました。わざわざ時間を割いて僕らの大会のために常滑まで集まってくださりありがとうございました。 大会中は僕の精神的な辛さゆえに車検などに対してぶーぶー言ってしまいましたが、改めて今振り返るとルールに忠実に車検するのは当たり前のことだったと思います。すみません。 競技以外にもテクニカルプレゼンテーションなどの企画も楽しかったです。いろいろなことを学ぶいい機会になりました。 相方: ここであんまり言いすぎるとチーム解散みたいになっちゃうのでとりあえず一言だけ。 今月末のブロック大会に向けてまだまだ頑張ろう！ 選手や交流してくれた皆さん: 某ウイルスの影響もありTwitterを通してしか見れていなかったロボットが実際に目の前で見ることができたり、技術的な話をうかがえたりと興味深かったです。すごくいい刺激になりました！次会うときにはこちらもよりいいもの用意しておきます💪 All_outlookの皆さん: 関東から夜行バスで来るのは本当に大変だったと思うけどお疲れ様でした！ドライバーとか色々貸してもらってばっかりでごめんなさい。起動音とか色々面白くていい刺激になりました。仲良くしてくれてありがとう、夜ご飯とか最終日の昼ごはんとかも一緒に食べれて楽しかったです！ また一緒に美味い店行こうね🔥 メンター・両親・親戚の皆さん: 普段から身近なところで支えてくださってありがとうございました。送迎など毎回お世話になりました。帰省の時とか毎回床や机を電子部品だらけにしてごめんなさい。これからも頑張ります。 P. S. @親 3月の帰省の時は家にオシロスコープと3Dプリンタとその他機器大量に持って帰るから狭いだろうけど家のスペース空けといてねー 白熊とパンダくん: ふわふわ気持ちよかったよ！ありがとう！ 終わりに: だいぶ長い記事になってしまいましたが読んでくださってありがとうございました。Root41としての活動はこの年度で最後なので（相方が大学受験に突入）悔いのないようにしっかりとやり遂げたいです。まずは岐阜の地でBLDCをぶるんぶるん走らせて点を入れることを目標に頑張ろうと思います。 では、RCAPに関わった全ての皆さん本当にありがとうございました🔥 やっぱり終わらない: そういえばこの前岐阜ブロックの交流会があったのでそのときに提出したプレゼンシート載せておきますね。デザイン凝ったり研究成果をA3の狭いスペースに詰め込んだりと色々頑張ったのでぜひ見てください！ 2022シーズンのプレゼンシートです#Root41_RCJJ pic. twitter. com/Wn3zuwekcg &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) January 30, 2022 予告: 来年度は同じ釜の飯を食う（物理）、同じ屋根の下で暮らす（物理）、裸の付き合い（物理）のロボカップチームが爆誕しそうな流れになってきています。続報に乞うご期待です（ちゃんとRoot41の活動がしっかりやり遂げたいと思っているので少し先になります） &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) January 30, 2022 なんかはじまるらしいですよ…ﾜｸﾜｸ 終わりに(2nd): 今度こそ本当に終わりです。では残り短いですが良い週末を👋 "
    }, {
    "id": 23,
    "url": "https://soradev81.github.io/20220109/",
    "title": "BLDCモーターで音楽演奏",
    "body": "2022/01/09 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 明けましておめでとうございます。 新年一発目は一般的にはあいさつ的な記事や今年の意気込みや目標を記事に書き綴ることが多いそうですが、そんなの誰も興味ないと思うので技術的なネタ記事を書こうと思います。 BLDCで曲を鳴らしてみた: まずはこちらをご覧ください。 みんな見て見て！！パンダくんのBLDC励磁音𝐌𝐮𝐬𝐢𝐜 𝐒𝐡𝐨𝐰がはじまるよ！！とっても上手に演奏していてかわいいね！！#NyanCat pic. twitter. com/5UeUApedFn &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) December 27, 2021 今回はこれについて解説していきたいと思います。 説明@初心者向け:  Note: この章はロボットや工学に精通のない方、まだ初心者の方、小学校高学年程度を対象とした解説です。この解説がToo Easyな方は次の章まで飛ばしていただいてかまいません。また説明を簡単かつ直感的にするために一部不正確な表現や擬音語や擬態語を用います。 まず白熊や人間などの動物がどのように「音」を聞いているのでしょうか。「音」とはすなわち空気の震え方のことです。 スピーカーやイヤホンなどの音源は震えている電気信号で薄い板を振動させて空気を振動させています。その振動が空気を伝わって耳の鼓膜を振動させ、私たちは「音」を認識することができます。 具体的にはスピーカーに取り付けられたコイル（=導線をぐるぐるとらせん状に巻いたもの）に震えている電気を流すことで薄い板を振動させています。ではここで今回の記事の主役ブラシレスDCモーター(略:BLDC)の構造を見ていきましょう。 中央部に120°間隔で配置された電磁石があり、その周りを永久磁石が取り囲んでいます。音を鳴らす仕組みとは大きく関わりませんがせっかくなのでBLDCの特徴についてひとつ学んでいきましょう。BLDCは一般的なDCモーターとは異なり永久磁石が回転します。（つまり電磁石は回転しない） 音の話に戻します。今回のBLDC演奏ではスピーカーと同じように電磁石（≒コイル）に震える電気信号を入力することでぶるぶると振動させ、それが音となって聞こえる仕組みになっています。 ちゃんとした説明:  Note:この解説を理解するには中学校卒業程度の電気の知識に加え、弧度法、PWMの基礎的知識、DCモーターの回転原理の知識が必要です。また便宜上やや不正確な表現を使う場合はそこをイタリックで表記して差別化します。 今回のBLDC演奏で使用した駆動方式は矩形波強制転流です。BLDCの構造や原理があまり理解できていない方は、まずこちらの記事をご覧ください。 今回の動作デモでは回転速度一定で制御しています。各相の波形はこちらの画像の通りです。（画像は先ほどの記事からの引用です。） 各相の波形は2π/3[rad]ずつずれているだけなので、今回は一相だけに注目して解説していきます。 横軸が時間で縦軸が電圧です。緑色で示した時間がモーターが1回転する時間です。黄色で示した矢印がモーターに加わる電圧です。矩形波強制転流では、緑色矢印の時間を短くプログラムするとモーターはより高速に回転し、黄色で示した電圧を高くするより高トルクになります。  BLDCの知識がある方向け補足説明:お分かりかと思いますが今回の解説では簡素化のためにBLDCを3相2極のものとして解説を進めています。そのためこの解説では電気角と機械角を区別して扱うことはしません。実際に今回のデモで使用したBLDCは12相14極のものです。 今回の駆動の目的は演奏なのでモーターにかける電圧は100%である必要はありません。つまり黄色矢印の電圧を低くする必要がありますが、今回使用した回路ではそれは無理なのでPWMを使用して擬似的に再現します。 このPWM周波数（ON・OFFの切り替えの速さ）が実際に聞こえる音階の周波数になります。あとは脳筋でこれを変化させる楽譜を配列に格納しておきます。 ではこの周波数がなぜ音として聞こえるかについてです。電磁石は鉄心の周りをコイルがぐるぐると取り囲む構造になっています。鉄心などの磁性体は時間と共に大きさや向きが変化する磁界（=交番磁界）が加えられるとわずかに伸び縮みする性質があります。これを磁歪と言います。 この磁歪が空気に振動を伝え、音として聞こえる仕組みです。これを励磁音と言います。 これは実際のBLDCの中身です。鉄心をコイルがぐるぐる取り囲んでいるのが確認できますね。 身近にある励磁音としては電車が発車する時に聞こえるｳﾞｵｫｫｫｫｵｵｵｵﾝ(‘ω’)))という音がそれです。もう退役してしまいましたがドレミファインバータなどと呼ばれたものもそれにあたります。  STM32マイコンの知識がある方向け補足説明:今回のESCの制御マイコンには秋月で100円未満で帰る激安のSTM32L010F4を使用しました。しかしこのマイコンのFlashは16kB、RAMは2kBしかなくHALで記述したら容量を軽々とオーバーしてしまったので、頑張ってLLで記述しました。 公開データ: こちらにデータを公開しておきました。ライセンスはCC BY-NC-SA 4. 0です。  終わりに: 最後まで読んでくださってありがとうございました。BLDCを学び始めてここまでくるのに相当な努力と時間がかかったので、こういう形で一つ世にリリースできたことを嬉しく思います。 ではまた🤟 "
    }, {
    "id": 24,
    "url": "https://soradev81.github.io/20210925/",
    "title": "望遠レンズを分解する",
    "body": "2021/09/25 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 こんにちわ。夏休みがもうすぐ終わるらしいですが、もうなんか飽和してきたような感覚が…。 本題: ずっと前の話ですがNikonの望遠レンズの自動手ぶれ補正がぶっ壊れて変な挙動するようになっていたのでそれを直したい。 直し方: ヤフオクに「レンズは動作するけど取り付け部のツメが死んでるジャンク品だよ」というコンディションのものがあったのでそれを買って、ツメ部分だけ手ぶれ補正が壊れたものから移植して修復する。 レンズ名はAF-P NIKKOR 70-300mm 1:4. 5-6. 3G EDです。 蓋を外す: 適当な精密ドライバーで頭にある3つのネジを外します。これはめっちゃ簡単。 次にカメラ側との接触端子を外します。ここは接触端子付近のネジを精密ドライバーで外すとパカっと外れます。のちに外側の部品が外れることになるので端子部分の基板は内側に追いやっておきます。  内部に部品が脱落したりレンズに傷がついたりしないようにさえ注意すればそこまで難しいことはありません。なんかメカメカしくて血が騒ぎますね😋 あとは蓋を固定している三盆のネジを外せば…  外れました💪 中に見えてるのは制御基板かな？これ以上は修理には関係ないので分解しないことにします。 蓋を移植する: ヤフオクで買った例の動作するジャンク品も同様にして蓋を外していきます。あとは蓋を入れ替えて逆の手順で組み立てていきます。  これで正常動作するようになりました。 せっかくなのでこの機会にレンズのクリーニングも行ってしまいましょう。  これで修理は終了です。試し撮りしてみたところ問題なく綺麗に写るようになりました。 ここでは終わらない白熊: 正常動作するものが一つできたということは、故障してかつツメも折れたやつが一台できたということです。この使えない方をただオブジェにしたり、ゴミ箱へポイしたりするのも勿体無いですし面白くないので分解しておもちゃとして遊ぶことにしました。 ではここから先は語ることも特にないので画像だけになりますがお楽しみください。   このすぐ上の写真が手ぶれ補正機能の部分だと思われます。あれ、左上らへんのばねがなんか外れてます。 実はこれが手ぶれ補正がぶっ壊れてた原因でした。まさかと思ってこのばねを取り付けて組み直したら、ツメの部分は破損していてしっかりとカメラに嵌合できないものの正常動作して写真が普通に撮れました🔥 ラッキーなのかどうなのか…複雑な心境です。 感想: 今回の修理（？）で実用できるものが一台、使えるもののツメが破損してるものが一台生成されました。細かい部品は多かったですがロボット作ってる白熊にとってはいつものことなので難易度はあまり高くありませんでした。 普段は見ることのできないレンズの製品内部を見ることができてとても興味深かったです。それと同時にこんなに複雑に絡み合って動いてる光学レンズの技術力の高さにも驚かされました。 では今日はこの辺で。 "
    }, {
    "id": 25,
    "url": "https://soradev81.github.io/20210820/",
    "title": "CAE入門 -静的応力編-",
    "body": "2021/08/20 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 こんにちは。しろくま＠胡瓜です。今日はCAEについて語っていきたいと思います。 諸注意: この記事はFusion360のシミュレーション機能を少し触ってCAEとはどういうものなのか理解してみようという趣旨の記事です。自分自身もシミュレーションについて詳しい知識を持っているわけではないので内容や表現の正確性については保証しかねます。また、誤りなどがあった場合DMなどで教えていただけると幸いです。 CAEとは: 実際に部品を作る前にコンピュータに事前にシミュレーションさせて強度とか熱とか色々解析するツールです。。僕はめんどくさいのでキャエと読んじゃいますが、シーエーイーって読む人の方が大多数だと思われます。 よくわからないと思うので実際の画像をいくつかお見せします。「あーなるほどあいつか」ってなるんじゃないでしょうか。  上の画像が静的応力解析、下のやつが熱解析ってやつです。今回は一番説明が楽そうでかつよく使う静的応力解析を扱います。 静的応力 is 何: 応力っていうのは物体の断面積あたりにかかる力のことです。静的応力とは静かに力を加えたときにどんだけ部品にどんだけ力がかかるかなっていうものです。この応力によっては部品が変形したり、壊れたりします。Fusion360では構造荷重および拘束によるモデルの変形と応力を解析できます。 ちなみに応力は断面積分の力です。単位はラスカルパスカル(Pa)です。 [{σ}=\frac{F}{A}] やってみる。: 今回はこちらのの3秒ぐらいでモデリングしたフックみたいな部品をご用意しました。素材はA7075を想定します。画像だとサイズが伝わりにくいと思うので隣にお馴染みの寛永通宝を置いておきましたので、お手元の財布の中の寛永通宝と比較してみてください。 今回はこの部品にある2個の穴をネジで固定し、先っちょの方の平たくなってるところにぐいぐい負荷をかけると想定します。 まずはFusion360のワークスペースをシミュレーションに切り替えます。するとなんかダイアログが出てくるので静的応力を選択します。 構造拘束: まずはネジ穴の部分を固定したいので構造拘束を設定していきます。 ネジ穴の面2つを選択してOKを押します。 これでネジ穴を固定することができました。いい感じです。 荷重を設定: 果汁じゃないです。荷重です。ｲﾀｲｲﾀｲﾔﾒﾃ!!ｲｼｦﾅｹﾞﾅｲﾃﾞ!! 構造荷重を選択し、次に荷重を加える面を選択します。そして何Nの力を加えるかを設定します。今回は試しに20N(≒2kgf)を設定してみます。 これで解析の準備は完了です。解析ボタンを押して実際に解析してみましょう。クラウドもローカルでもお好きな方をお選びください。複雑な解析になるとスペック的に必然的にクラウドを選択する必要が出てくると思いますが、この程度だったらどっちでもかまいません。今回僕はローカルでやりました。クラウドでもローカルでもどちらでも最終的に得られる結果は変わりません。 結果を見てみる: 解析が終わったら結果を覗いてみましょう。楽しみですね。 安全率: ここでは安全率が示されています。安全率とは許容される応力と実際にかかる応力の比です。 安全率が1の場合ギリギリ負荷に耐えている状態で、安全率が1を下回るとその部品は負荷に耐えられずにぶっ壊れます。逆に安全率が増えていくとその部品はより余裕を持って負荷に耐えることができます。 これをみる限り最小安全率が4. 05なので壊れる心配はなさそうです。ちなみにエレベータなど人命に関わるようなところだと安全率10以上で設計されたりするそうです。 応力: 次に応力を見ていきます。 これをみる限り根本の部分に最大35. 82MPaの応力が加わっていることがわかります。また、部品の縁の部分に比較適応力が集中していることがわかります。 補足: シミュレーション結果では部品が変形して表示されているので「こんなに変形したら使い物にならぬ」と思われがちですが、実際の変形が小さすぎる場合に歪みを把握しにくいので誇張して表示されてるだけなのでご安心ください 改善していこう: 解析して壊れるか壊れないか試しておしまい。だとせっかくの解析を活かしきれていません。せっかくなのでこれを元に部品を改善していきましょう。 さっき応力が集中してた部分にフィレットを多めにかけてみたり… 逆に先ほど応力があまりかかってなかった部分は大胆に肉抜きしてフィレットをかけてみたりしました。こういう肉抜きの時は三角形に抜くようにすると強度を保ったままうまく肉抜きできることが多いです。 肉抜きにより約15%も質量を減らすことができました。さて肝心の強度はどうなったでしょうか？もう一回解析をかけてみます。 最小安全率がが4. 69と先ほどの4. 05と比べて向上しましたね。続いて応力も見ていきます。 先ほど応力が集中していた部分に思いっきりフィレットをかけたことによって応力を分散できているのがわかります。ここからフィレットには負荷が集中することを防ぐ効果があることがわかります。旅客機の窓が円い形状をしているのはこのためです。 これをみる限り、今度は肉抜きしたところの角の部分に応力が集中しちゃったのでそこにさらにフィレットを強めにかけてもいいかもですね。解析なんて使って減るものではないので何回でも使いまくって改善していきましょう。 まとめ: 今回は文より図メインの記事にすることで直感的なわかりやすさを目指してみました。ロボットなどを作る際にこういった解析ができると勘に頼らずに壊れにくい設計をすることができるようになります。 また、この例のように部品を実際に製作する前に形状の改善を図ることもできます。勘もある程度役に立ちますが、勘だけに頼るのはちょっと危険です。 というロボット製作で一番よく使うと思われる静的応力解析についてざっとではありますが軽く説明してみました。質問等あればお気軽に聞いてください。わかる範囲で答えます。 大事なロボットの設計を勘だけに頼るのやめませんか？ "
    }, {
    "id": 26,
    "url": "https://soradev81.github.io/20210711/",
    "title": "Root41のLi-Po運用",
    "body": "2021/07/11 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 概要: Root41のLi-Poバッテリー（以下Li-Po）の運用についてです。ごく当たり前のことしか書いてないと思いますが、一年半ぐらいLi-Po運用して膨らんだ個体や異常が起きた個体がなく、特に性能の低下もみられないのでうまく扱えている方だとは（僕の中で勝手に）思っています。 バッテリーと充電器: 使ってるLi-Po: FULLYMAX 2S 7. 4V 1300mAh 20C 335. 5Wh/L 重量が軽いくせにいい感じの出力があって、コスパもよく扱いやすいのでおすすめです。2Sなので電圧はそんなに高くないですが、ロボットを速くするには電圧を上げればいいってもんじゃありません。適切にモーターを選定すれば7. 4Vでも十分すぎる出力が得られます。 使ってる充電器: Hitec X2 Vertical Compact 比較のために隣に坊ねずみをおいておきましたが、とにかくコンパクトなのが特徴です。やったことないですがLi-Fe、Li-Ion、Li-HV、Ni-MH、Ni-Cd、PBなどいろんな種類も充電できるっぽいので持ってて損はないと思います。公式だと10k円コースですが、Amaz○nで買うと7. 5k円とかだったりするので色々探して最安値を探すことをお勧めします。 ただ「バッテリーの充電」というリスクを伴う行為を行う機械なので絶対に信用できる安全な店から購入してください。もう一度言います、信用できる店から購入してください！並行輸入品とかノーブランドのやつに手を出すのは絶対にやめましょう。 保管: このように、セーフティーバッグに入れた上でさらに頑丈な金属ケースに入れて保管しています。 セーフティーバッグはイーグル模型さんのやつを使用しています。正直高いです。ただAmaz○nとかで安いノーブランドのやつはあんまり難燃性能がなく、普通にライターで炙ったら燃えるみたいな情報を聞いたことがあるので、ここはお金をかけたほうがいいと思います。厚手で作りも非常にしっかりしているのでいい製品です。 金属ケースはTRUSCOのT350を使用しています。がっちりとロックできるので万が一内部で爆発しても外に燃え広がる危険性はかなり低いと思います。これを持っておくとLi-Poや充電器、Li-Poチェッカーなども一緒に収納できるので持ち運びに便利です。 保管の際はLi-Poの1セル当たりの電圧は3. 7-3. 9Vの範囲になるようにしています。これはRoot41のチーム内運用規則で定めてあります。間違っても満充電や使い切った状態で保管のような自殺行為はしてはいけません。バッテリーの電圧は温度などで多少変動するので、それにより過充電になったり過放電になったりする危険性があるためです。 大会前日に満充電にして備えたい気持ちはわかりますが、潔く諦めて当日の朝早起きして充電するようにしましょう。（一晩くらいならまぁ大丈夫かもしれませんが僕はしたくないですね…。） 充電: バッテリーの充電は1C充電が良いとされています。バケツに勢いよく水をJavaJava入れていったら周りに飛び散ってしまうのと同じで、電流を一気に流すとバッテリー自体にも負担をかけるためです。そもそもロボカップジュニアの日本大会ではルールに1C充電までという制限があるので、これに関する異論はないと思います。 ちなみに先程のバッテリーは1300mAhなので1C=1. 3Aになりますね。自分たちは若干の余裕を見て1. 2Aで充電しています。 また、Li-Poの満充電とは1セル当たり4. 2Vであることを意味します。デフォルトの設定だと4. 2Vになったら充電が終わるようになっていますが、これも僕たちは余裕を持たせるために4. 18Vまでの充電に留めています。 充電時はセーフティーバッグに入れて充電しています。これに関しては  異変にすぐに気づくため&amp;放熱のためにセーフティーバッグに入れないほうがいい 万が一発火した時に備えてセーフティーバッグに入れたほうがいいという二つの意見があり、どちらも正しいのが現状です。自分たちは  正しい充電ではバッテリーの発熱がほぼ感じられなかったこと 充電器が異常を検知した場合充電を中断してくれること 剥き出しだと、異変に気づけてもその後の対処が難しいことの二つの理由からセーフティーバッグに入れるという選択をしました。 ロボットを動かす: ロボットに実際に取り付けて動かす時には電圧計で電圧を目視で確認しながら動かしています。7. 4Vを下回らないようにするために、余裕を持って7. 6Vぐらいになったら交換しています。言うまでもないと思いますがヒューズの搭載、すぐに押せる位置の電源スイッチは必須です。あと、衝撃がバッテリーに加わったりしないようにがっちりと面で固定は必須です。 廃棄: 買ったバッテリーの中で一個だけ運用半年目ぐらいでコネクタの接触不良が頻発したもの（多分初期不良だと思われ…？）がありました。コネクタの不良なので多分やろうと思えばすぐに治せますが、コネクタの交換や改造はルール違反となる&amp;怖いから単純にやりたくないので廃棄とすることにしました。 塩水につけるとかつけないとか色々ありますが、僕は自治体の環境課に直接持ち込んで処分してもらうという方法を取りました。これについては受け付けてくれる自治体と受け付けてくれない自治体があると思うので直接確認をとってみてください。 ID管理: バッテリーをいつ購入したか・どこから購入したかなどの情報にすぐにアクセスできるようにするために、バッテリーにID番号を割り振って区別がつくようにしました。また、バッテリーにID番号とQRコードが記載されたラベルを貼り、そのQRコードを読み込むことでバッテリーの情報にアクセスできるようにしてあります。 使用開始時の状態の写真も撮ってあり、少しでも膨らみなどが感じられたらすぐに確認できるようにしてあります。多分このID・QRコード管理は僕たちのチームしかやってない管理方法だと思うのでせっかくなので載せておきます。 規則の制定: ここまで色々と書いてきましたが、安全なLi-Po管理にはこれらを厳守する必要があります。ただ口頭確認するだけなどのあやふやな状態で運用するのはよくないのでチーム内でこれらの注意点をまとめてチーム内運用規則として定め、その上でLi-Poを運用しています。 まとめ:  運用前にちゃんとした信頼できる充電器やバッテリ、その他色々なものを用意する あらかじめしっかりと運用規則を定めておく 当たり前のことを当たり前にちゃんと守る以上僕たちのLi-Po運用でした。これを読んで面倒だからやりたくないと思ったらまだLi-Poに手を出すべきではないと思います。Li-Poの扱い方に関しては色々意見があると思うので、もしあればコメント欄やリプなどに書き込んで知見を共有してくれると嬉しいです。 ではおやすみ世界。 "
    }, {
    "id": 27,
    "url": "https://soradev81.github.io/20210605/",
    "title": "Rubber Duck Debugging",
    "body": "2021/06/05 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 お久しぶりです！しろくま＠胡瓜です。 皆さんプログラムしててこんな経験はありませんか。  あなた: ママー、このプログラムが動かない！！ママ:  どっか間違ってるんだよ。もう一度確かめな。あなた: そんなことないよ！めっちゃ見直ししたもん！ママ:  じゃぁ見直しが足りないんだよ。あなた: そんなことないもん！うぇーん、パパー！！！！パパ:  ママの言う通りだ、ちゃんと見直ししなさい。（以下無限ループ） ありますよね。いくら見直してもどこが間違ってるのかわからない。でも間違ってなかったらちゃんと動くはず。大抵、こう言うミスの原因の大半は=と==を間違えたとか、不等号の向きが違ったとかしょうもないミスであることが多いです。 そんなときに使える技。ラバーダック・デバッグ（Rubber Duck Debugging）をご紹介します。 用意するもの:  お気に入りのぬいぐるみ 恥を捨てた心 または個室これだけです。ぬいぐるみは本家ではラバーダック（お風呂にいるアヒルちゃん🐤）を使用するそうですが、なんでも大丈夫です。持ち運べる卓上サイズのものがちょうどいいと思います。恥を捨てた心とは側から見たら「あいつ頭おかしくなったんじゃね？」って言う感じのことをするからです。個室があればそちらで存分やるのもいいでしょう。 今回僕はこちらのぬいぐるみにお付き合いいただくことにしました。kawaii やり方: まず、合ってるはずなのになぜかうまく動かないプログラムをぬいぐるみに向かって声を出しながら説明していきます。その際に以下のことを必ず守ってください。  ぬいぐるみはプログラミング初心者だと思って丁寧極まりなく説明する。 1行ずつ上から順に説明する。やり方はこれだけです。簡単ですね。大事なのは恥を捨てることです。 わからないことがあったとき、何がわからないのかを人に説明している途中に勝手に自己解決してしまうこと結構ありますよね。それを再現するものになります。「ここがこうだから…あっ、待って、これ違くね？」みたいな感じでミスを見つけることができます。 練習: 適当に下に1から10まで足すプログラム（C++）を用意しておきました。ただしこれは正しく動きません。これぐらいであればラバーダック・デバッグしなくても余裕だと思いますが練習だと思ってやってみましょう。（forを使えって感じですが、ここではあえて使わずにややこしくしてます。） 「まず、sumって名前の変数を0にして…あっこれは総和を代入する変数ね。次に、カウンタも0にリセットする。次にsumにcountの値を足して…」 って言う感じです。 練習の答え: if(count &lt; 10) {の行が違いますね。これは10まで足さないといけないので、 if(count &lt;= 10) {が正しいです。 最後に: 今回はプログラミングを例にしてラバーダック・デバッグ🦆を紹介しましたが、意外と日常生活のいろいろなところで使えます。例えば僕がアホなだけかもしれませんが方程式を何回解いても答えが毎回変わる謎現象や、なぜかうまく動かない回路など応用できるところは幅広くあります。 最初は慣れるまで違和感があるかもしれませんが、慣れて仕舞えばものすごく有能なデバッグ方法になるのでぜひ試してみてください。ちょうどいいぬいぐるみがない人は今すぐ買いに行きましょう。愛着の湧く「ずっと一緒にいたい」と思えるものを選ぶことを忘れずに。 ではまた "
    }, {
    "id": 28,
    "url": "https://soradev81.github.io/20210520/",
    "title": "磁気エンコーダな日常",
    "body": "2021/05/20 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 おはようございます。高専では出会いがTwitterやLINEだったりすることも多いので、現実でも「白熊君」と呼ばれることも多かったり…。白熊好きなのでﾁｮｯﾄｳﾚｼｲ 概要: 磁気エンコーダをBLDCにくっつけて3秒ぐらいでプログラム書いて動かしただけの動画をTwitterにUPしたら、予想を上回る高評価をいただいたので急遽記事にします。寝ている間にフォロワーが11人も増えていることに朝起きて気づいた時、頭の中が「？？？」になりました。 What is 磁気エンコーダ？: とりあえず動作をお見せします。 磁気エンコーダの動作テストしてみました。 pic. twitter. com/sQCheHYhCC &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) May 19, 2021 磁気エンコーダとはN極とS極のある磁石を素子の上にかざすことで角度を検出することができるセンサです。その磁石が普段使うような磁石とはちょっと違って、極の向きが違っています。と言われてもわかりにくいですので図にしました。 こういう平べったい方向にNとSがそれぞれあるような磁石によって角度を求めることができます。物理的な接点がないので寿命も長そうな感じです。 調理開始！: 設置: 今回使う磁気エンコーダはこちらでAS5600ってやつです。スイッチサイエンスさんで1500円ほどで購入しました。 まずは磁気エンコーダを固定します。と言ってもめっちゃ簡単です。  軸の中心から1mm弱ずれてしまっていますが全く問題ありません。 どうでもいいですが暖色系の照明でロボットの部品取るとエモいですよね。 配線: ただのI2Cの接続なので省略させていただきます。SDA同士、SCL同士と電源を繋ぐだけです。今回はマイコン側にNucleoF303K8を使いました。 プログラム: テスト用にこんなプログラムを書きました。サンプルプログラムをちょこっと変えただけのものですが載せときます。 データをシリアルで送るプログラムです。懐かしのProcessingで画面にでっかく表示できるようにしたかったので2バイトに分割して、さらに頭に’H’を送信することで目印にしています。プログラムを全部のっけるわけにはいかないのでこちらのリポジトリに全て載っけておきました。MITライセンスなのでご自由にお使いください。 何に使うの？: BLDCはブラシがない分ソフトウェア的にコイルに流す電流を切り替えないといけないので、回転してる磁石の位置を取得できる必要があります。 一般的にはホールセンサと呼ばれる単純にN極とS極に反応するセンサを磁石周辺に取り付けて検知することが多いですが、磁気エンコーダにしてより正確な角度を求められるようにしたら後々色々と便利かなと思ったからです。 例えば角度を指定してその角度に回転させると言ったようなサーボ的な使い方もできるようになるかもしれません。僕は多分しないと思います。 終わりに: やっつけ感のある記事になってしまいましたが、今後需要があれば加筆するかもしれません。質問などDMなどで待ってます。 ではまた。 "
    }, {
    "id": 29,
    "url": "https://soradev81.github.io/20210424/",
    "title": "NeoPixel指南",
    "body": "2021/04/24 -  Note 2022/05/06:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 Root41のロボットを初めて見た人がほとんど口にするフレーズ。  光っててかっこいいですね！ なんで光ってるんですか？ ひかるんば！ひかるんば！（←大垣に行った時に昔つけられたRoot41のロボのあだ名） 電力の無駄では？などなど。足回りとか円形ラインセンサとか色々と拘ったところはあるんですけど、やっぱり一番に目に入るのは円形状のフルカラーLEDだそうです。そりゃそうですよね。あそこまでビカビカ光らせてるチームはあんまり見かけませんし、相当な変態ロボに映るのは当然だと思います。 そしてとうとう一昨年相方がこんな発言をしました。 Root41の代名詞(？) pic. twitter. com/yUQBtLSDAE &mdash; ハジメ Root41 (@akapon03_hazime) August 4, 2019 代名詞だそうです。いいですね。これ以降円形にNeoPixelを配置するデザインを「Root41らしさ」と捉えて継承することになりました僕が勝手にしました。 今日は「なんでNeoPixelが大量に乗ってんねん」って話をしていこうと思います。 NeoPixelってなんやねん？: フルカラーのLEDの素子です。これのすごいところが「大量に載せたとしてもマイコン1ピンで制御できる」というところにあります。 一般的なRGBLEDだとPWM対応のピンが3本必要になります。それをLEDの個数個必要とするので、 [LEDの個数\times3] の分だけマイコンのピンが必要となってしまいます。こんなことしてたらマイコンのピンがすぐに埋まってしまいますし制御もしにくいです。 対してNeoPixelはたったの1ピンで済ませられるところにあります。さっきからNeoPixelと言っていますが、NeoPixelというのはAdafruit社のモジュール化された製品の名前であり正式な名前ではありません。WS2813B、WS2812B、WS2822SなどなどたくさんLEDの種類がありますがどれも同じような機能を持っているので、単純に総称してNeoPixelと今回は呼ばせてもらうことにします。 例えばWS2812Bだと、マイコンからの「何番のLEDをこの色にして」という信号をバケツリレー形式で回していくためLEDを1ピンで制御できるようになっています。WS2813Bとかだとその方式が色々と改良されてたりするのですが、優秀なライブラリがあるのでこちらから特に意識することはありません。 ここまでの話をまとめると  NeoPixelは1ピンでフルカラー制御できて優秀ということです。 なんでNeoPixel載ってんの？: 建前: デバッグがしやすいからです。こちらの動画をご覧ください。 ハジメ君と僕とで、ゴール率を上げるための対策をぼちぼち進めています！ハジメ君のは、ライン外のボールが運良くすぐ内側に戻されたときに、速攻でゴールを決めるというものです。僕のは、ゴール前のボールを確実に点につなげられるように、位置予測でゴール方向にロボットを傾けるというものです！ pic. twitter. com/Knl2DVfq6P &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) November 29, 2020 LEDの色が変化しているのがわかります。LEDの色は、  平常時: 赤色（2号機は緑色）で攻める方角を示す ラインを踏んだ時: 全面白色 キックするとき: 全面黄色となっていますので、半年前のこの動画を今僕が見返してもどのようなプログラムで動いているかというのがなんとなくわかるのです。実際のデバッグではこれはものすごく役立ちます。iPhoneとかのスローモーション機能で撮影しておきながらロボットを動かして、問題のある動作のところをLEDの色に注視しながらスローモーション動画を再生すると何が原因だったのか、途中でどういう処理が入ったのかなどを後からじっくりと解析の材料にすることができます。 あと、1号機と2号機で平常時の色を分けることでアウトオブバウンズや故障の管理が見た目でわかりやすいというのもあります。これらの情報はマイコンのEEPROMに保存されてるのでプログラムを書き換える必要はありません。EEPROMの話についてはまた今度することにします。 本音: 単純にかっこいいからです。かっこよくないですか？え、かっこいいですよね？？（無理矢理） やっぱり自分の好きなものを追求することは大切だと思います。僕は芸術家でもなんでもないですが、そういう美的な視点は常に持つように心がけてます。やっぱり自分の設計が美しくないと思えたら、それは自分の中により良いものを追求できる能力があるとと捉えています。つまり設計を納得いくまでやり直すということです。 やっぱり美しいものって、ただ綺麗なだけじゃなくて果たすべき役割も果たしてくれるんですよね。自然界の風景とか生き物って美しいもの多いですよね。それは何万年、何億年かけて洗練されたものだからだと思ってます。無駄がないというか、最適化されているというか。（一体何を言っているんだ） 僕もやってみたい✋: NeoPixelの回路自体は簡単なので難しいことはありません。プログラム？公式のライブラリを使いましょう。 現時点で僕ではNucleoとArduinoで動作させられることを確認しています。もちろんこれ以外のマイコンでも可能だと思います。光らせ方の技術的なことに関してはまたそのうち書こうと思います。対面での交流とかでもこの質問は結構飛んでくるので知りたい人多いのかなぁと思ったり思わなかったり。 というわけで僕の謎の美的価値観を晒したところで、今日はこの辺で失礼。 "
    }, {
    "id": 30,
    "url": "https://soradev81.github.io/20210415/",
    "title": "STM32の開発環境まとめ",
    "body": "2021/04/15 -  Note 2022/05/11:1年以上経って情報が古くなったりしたので加筆してバージョンアップしちゃいました。 概要: STM32マイコンって開発環境多すぎん？っていう話です。あるサイトにはmbed、あるサイトにはPlatformIO、あるサイトにはSTM32CubeIDE…。初心者殺しな気がします。 というわけで僕が今まで触ったことのある開発環境をとりあえずまとめてみます。開発環境が複数用意されているのはSTM32マイコンの利点でもあるのですが、逆に欠点でもあるわけです。 初めて選ぶ人の感覚的な指標になるように扱いやすさと複雑なことができるの二つを⭐️3つを満点とする三段階評価にしました。 PlatformIO: 扱いやすさ:⭐️⭐️⭐️複雑なことができる：⭐️⭐️ 白熊的推しはこれです。PlatformIOさえ入れておけばとりあえずなんとかなると思ってもらって大丈夫だと思います。 他に何も準備しなくても簡単に書き込むことができます。アプリケーションではなくVSCode、Atom（ただしVSCode推奨）の拡張機能として提供されます。自分のお気に入りのエディタでマイコン開発できるメリットは非常に大きいです。 対応フレームワーク:  Arduino mbed STM32CubeIDE（HAL, LL） CMSIS等その他色々（しろくまが使ったことないのでごめんなさい🙇）メリット:  Arduinoやmbedなど使い慣れた言語で開発できる ユーザー数が多いので少し調べたらすぐに情報が見つかる コンパイルはまぁまぁ速い デバッグ（実行中に変数の中身を見たりすること）ができる STM32マイコン以外（Arduino含む）もPlatformIOで開発できる さまざまな書き込み方法（DFUなど）に対応している お気に入りのVS Code環境を使うことができる 色々フレームワークを選べる ライブラリの管理が優秀（検索してインストールボタン押すだけ）デメリット:  全てのSTM32マイコンに対応しているわけではない 初回のコンパイルがめっちゃ遅い（それ以降は速い）mbed: こちらも名のしれたmbedです。ブラウザさえあれば他に何もインストールしなくても開発できます。 扱いやすさ:⭐️⭐️複雑なことができる：⭐️ メリット:  何もインストールしなくても開発できる パソコンのストレージを食わない mbedなので情報がたくさんデメリット:  オフラインで使えない アカウントを作成する必要がある エディタが絶妙に使いにくい mbed以外での開発ができない デバッグできないSTM32CubeIDE: STM32が公式で出している開発環境です。公式なだけあって機能はとても豊富です。逆にこれでできないことは他の開発環境でもできないことが多いです。eclipseベースなのでeclipse信者の方はこれが肌に合うかもしれません。 ただLチカするだけなのに大量のコードを書く羽目になるので本格的な開発にはいいとは思いますが、プロトタイピングには向かないかもしれません。 扱いやすさ:⭐️複雑なことができる：⭐️⭐️⭐️ メリット:  基本これでできないことはない ピン衝突を防ぎながらピン割り当てができる eclipse LOVEな人は使いやすい DMA(Direct Memory Access)という神機能が使える マイコンのクロックも自由自在 デバッグできる 難しすぎて逆に使っていくうちにマイコンの仕組みが理解できるデメリット:  Arduino言語やmbedのような直感的なコード記述ではない C/C++言語の知識がない人には相当厳しい NucleoのArduino互換のピン配置の必要性があんまりなくなる 書き込みがちょっと遅いSTM32duino: 扱いやすさ:⭐️⭐️⭐️複雑なことができる：⭐️ ArduinoIDEのボードマネージャーに追加することでSTM32マイコンを開発できるようにする手法です。何もわからずとりあえずNucleoをノリで買ってみた人でも簡単にArduino感覚で使えます。 でも正直これ使うくらいだったらPlatformIOでArduinoのフレームワークで開発した方が使いやすいと思います。 メリット:  ArduinoIDE持ってる人はそのままでいい Arduino言語で記述できる ちゃんと使えるシリアルモニタがあるデメリット:  ArduinoIDE自体元々そんなに使いやすいものでもない コンパイルが遅い 書き込み方法が選べない（選べそうなメニューはあるがうまくいった試しがない）終わりに: それぞれの書き込み方法やチュートリアルとかは結構Qiitaとかに出回ってたりするんですが、開発環境まとめみたいなのがあんまりなかった（気がする）ので書いてみました。やっぱり開発環境や言語を選べるのはSTM32マイコンの強みかもしれませんね。 僕はとりあえずここに載せた全ての方法は食わず嫌いせずに一通り使ったことがあるので、もし質問とかあれば遠慮なくDMやリプください。 ではまた✌️ "
    }, {
    "id": 31,
    "url": "https://soradev81.github.io/20210318/",
    "title": "Root41 2020-2021機",
    "body": "2021/03/18 -  Note 2022/04/04:これは前ブログからの移行記事です。一部表現や文体の調整を行った箇所がありますがご了承ください。 どうもこんにちは。しろくま＠胡瓜です。 とりあえずRoot41は現在ロボカップのシーズンが終わり落ち着いた状態にあります。しかし、時間のロスはできるだけ避けたいので新学期が始まる前にハードウェア担当の僕は猛スピードで設計をやれるところまで進めておかないといけません。MacBookを触らない日はありません。Eagle、VS Code、Fusion360と睨めっこする日々が続いています。 概要: ここから本題に入ります。 こちらが本日の主役のRoot41 2020-2021機です。 Root41 2020#Root41_RCJJ #RCJJ2020_wakayama pic. twitter. com/VzbC7k0Jdx &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) April 25, 2020本来あるはずだった2020年の和歌山の全国大会に向けて開発しました。ブロック大会が終わってからの光速並みの開発だったので、色々と煮詰め切れてないところが若干あります。 Root41のロボットは二台とも完全に統一されています。完全に統一することで、Gitなどを利用し「二人で一つのプログラムを作る」ということができるためです。部活動などでやっているチームは回路班やプログラム班、機械班などと分けることができますが、僕たちは2人だけのチームなので究極まで効率化する必要がありました。また、2台ともハードウェアが同じということは試合の途中だとしても作戦変更が容易にできます。片方を守りにしたり、両方攻めさせたりなど戦況に応じて様々な作戦を実行できるというメリットがあります。 そして、これは初めての4輪駆動や初めての実用的なキッカーの搭載、初めてのLi-Poバッテリーなど挑戦でいっぱいのロボットです。当時の僕のロマンが詰まっています。 構成: 主なスペックはこちらです。       役割   部品名   個数         CPU   ATmega2560   1       ラインセンサ   NJL7502L   20（円形）       ボールセンサ   IRM-3638N3   16（円形）       ボール検知   NJL7502L   1       ジャイロセンサ   MPU-6050   1       モーター   Pololu 25D 20. 4:1 HP 6V   4       モータードライバ   VNH2SP30   4       ソレノイド   CB1037 10Ω   1       昇圧回路   XL6009   1       バッテリー   Fullymax Li-Po 2S 1300mAh   1       書き込み端子   USB Mini-B   1       操作   タクトスイッチ   3       表示   WS2813B   16   一般的なものしか本当に載っておらず、必殺技的なものもないです。よく言えば安定した構成のロボット、悪く言えば普遍的なロボットという感じです。 また、そんなに高額なものも使っていないと思います。 CPU: これがCPUユニットです。フラットケーブル一束のみで下部と接続されているので、コネクタとネジを外すだけで簡単に分離できます。このユニットの中に、  ボールセンサ CPU NeoPixel互換LEDなど中枢的な機能が詰め込まれています。裏返すとこんな感じです。 CPUは裏に搭載されています。大事なところなので内側に隠しておきたかったのと、丸見えだと見た目的に美しくないのでこの位置に配置されてます。 そうするとUSBポートに直接ケーブルを挿すことができなくなってしまうので、100均でUSBケーブルを買ってきて分解し、コネクタ部分だけを取り出して外側から挿せる位置に延長しています。これはUSBの規格的にあんまり良い方法ではないらしいですが問題なく動いているので、こんな感じになっています。 このマイコンボードを取り外すとジャイロセンサが取り付けられています。ジャイロセンサの地磁気の影響を受けない性質のおかげで、I2C通信がもっとも安定するマイコンに一番近い位置に配置することができました。 この隣には本来1Fの大容量のコンデンサが載っていたのですが、コネクタの信用性が高くあんまり効果がなかった割に重量を結構食っていたのでやめました。 eneloopとかの電池だと突発的に電池が電池ボックスの端子から離れたりすることもあると思うのであったほうがいいと思います。 はんだづけが汚いのはごめんなさい。このユニット自体が実は前々年度からの使い回しなので（=コスパ重視）そのころはフラックスクリーナーとか色々持っていなかったからです。 スイッチとUSBポートです。 さっきの100均USBケーブルの残骸がここにつながっています。また、スイッチは左から  Commandキー Aキー Bキーというふうにプログラムで割り当てられてます。Aキーを押すとオフェンス、Bキーを押すとディフェンスになります。プログラムを書き換える必要がないので、試合中に作戦変更が容易にできます。 プログラム動作中にCommandキーを押すとロボットが停止します。Commandキーは修飾キーとしても使えるので、Command+AとかCommand+Bとかの組み合わせで色々な調整モードに入れたりします。 キャリブレーションやキッカーテストもこのボタンの操作だけで全て行えます。 ボールセンサ: 共立電子で買ったIRM3638-N3を円形に16個配置しています。高いので、4年ぐらい前からずっと基板につけたり外したりで再利用しています。すごくエコです。 回路はRCフィルターを通してアナログで読み込んでいます。トランジスタでセンサの電源を高速でON/OFFして常にAGCをリセットした状態で受光できるようにしています。 NeoPixel: 白いカバーの下にはNeoPixel（WS2813B）が隠れています。NeoPixelは、たったい1ピンで明るさや色、彩度を全てのLEDに対して個別で指定できるという優れものです。 試合中は角度などの情報を常にLEDで表示しておくことで、試合動画を見返したときにロボットがどのような処理をしていたのかがすぐにわかりデバッグに大きく貢献しています。もはやこれなしでのプログラミングは考えられないほどリアルタイムで多くの情報を得られるのでおすすめです。 下部: CPUユニットを取り外すと残りはこんな感じになってます。 これを裏返すと、 こうなってます。2枚の写真で示した12箇所のねじ（上の写真4箇所、下の写真8箇所）を外すと、簡単に分離することができます。しかし、12本もネジを外さなければならないのと、また外すねじの頭の種類が2種類混在していてドライバーのビットを途中で付け替える必要があったことは反省点です。 そして、こうなります。 シンプルな構造ですね。 ソレノイド: ソレノイドは、ロボカップのロボットでは比較的珍しい上側の板に固定されています。これは円形ラインセンサを搭載するにあたってソレノイドを数ミリ浮かせる必要があったためです。 スペーサなどを使って下側の板に固定してもよかったのですが、こちらの方が部品数を減らせるためこのような構造となりました。分離する際にソレノイドの導線が邪魔をするのを防ぐためにピンヘッダで簡単に分離できるようにしています。 また樹脂スペーサを板につけて、ソレノイドに取り付けられた板が回転しないようにしました。 カバー・保護パーツ: 側面に取り付けられたカバーです。ヒューズとかが入った一番大事な回路や昇圧回路、モータードライバ等に異物が入るのを防ぎます。近くのホームセンターで1mmの硬質塩ビ板を買ってきてカッターと電動ドリルで加工し、100均の結束バンドで固定しています。 ここに書いてある「1」という数字は1号機の1です。2号機はもちろん「2」になってます。よく「どうやって描いたんですか？」と聞かれますが、ただのビニールテープです。 ホイールの外側に取り付けられた保護パーツです。巻き込みの他、ロボット同士でぶつかった時などにモーターに他ロボットの部品が引っかかり、ストールするのも防いでくれます。出力の強いモーターやバッテリーを使うのであれば、安全のためにもこれらの対策はした方がいいと思います。 3Dプリンタで造形したので強度はあまりないですが、予備部品を大量に用意してすぐに交換できるようにすることで運用しています。 モーター・ホイール: モーターはPololuさんの25D 20. 4:1 HPを使っています。スピード・パワー共に優秀ですが20%位より下の出力での制御がし辛いのと、立ち上がりに時間がかかるので「おすすめ！」って感じのモーターではないです。モーターマウントは、同社から販売されているものを金鋸で頑張って短く切断したものを使っています。 また、ラインセンサと干渉しないようにするために、2. 5mm厚のMDF板でモーターを浮かせる構造になっています。モーターは裏から4本のねじどめで固定しています。 ホイールは今1号機には耐久試験中ということでアクリル製のものが載っていますが、その前は3Dプリンタ製のPLAのやつが載っていました。3Dプリンタ造形の部品は細かい部分の強度が著しく劣るので複雑かつ強度が必要とされる部品には向かないことがわかりました。 昇圧回路: Amazonをはじめとする色々なサイトで売られているXL6009のモジュールを搭載したものです。このモジュールは本来30Vまでの昇圧なのですが、素子自体のデータシートを読むともっと電圧を上げることができるらしいです。 素子が出力する電圧は電圧調整ピンにかかる電圧の大きさで変わるので、可変抵抗の隣にあるチップ抵抗にチップ抵抗をお寿司みたいに乗っけて並列に半田付けし、電圧調整ピンにかかる電圧を変えて46Vまで昇圧できるようにしました。 46Vという絶妙な値なのは、耐圧が50Vより大きいコンデンサはガタイが良すぎるからです。定格ギリギリで本当は良くないですが…。 僕は過去に昇圧回路の実験でArduino本家を2機+互換機1機を壊したのがトラウマだったので、安全対策はかなり入念にしています。 まず、昇圧回路のモジュール自体に異常な電圧が発生したとしても、ダイオードによって遮断され外に異常電圧が漏れ出ないようにしています。また、マイコンからの信号線もフォトカプラで電気的に絶縁しマイコンが逝くのを防いでいます。 さらに、キッカーを放つときはFETでコンデンサとソレノイドだけを残して回路を遮断するので、プログラムのミスでずっとHIGHのままになっていたとしてもコンデンサの放電が終わると自動的にキッカーが引っ込み、昇圧回路自体に大電流が流れ込んで焼けるのを防いでいます。ちょっと過保護だったかもしれません。 昇圧回路の実装に当たっては、kossanさんにDMで色々教えていただきましｔた。本当にありがとうございました。 保護回路: 保護回路はロボットを安全に動かすためにとても重要なものです。このロボットは僕達がLi-Poバッテリーで動かす初めてのロボットだったので、一番シンプルなヒューズ+目視での電圧確認という方法を取りました。 この回路が逝くと、コート上でリアル花火ショーが始まってしまうので絶縁はしっかりやっています。基板自体を3Dプリンタ造形のケースで覆い（上の写真は撮影用に外しています）、外から異物が侵入しないようにしています。 このケースが結構重いんですが…でも燃えるよりマシなのでここは妥協すべきでないです。 裏側です。大電流が流せるようにパターンは広くとり、また上からはんだモリモリにしています。 バッテリーケース: こちらも3Dプリンタ造形です。衝撃を緩和するためにふわふわクッションを入れています。また、車検の時に3cm以上の突起があるロボットはそもそも出場できないようになるはずなので、3cmよりさらに奥の部分は肉抜きしています。このWARNING!というシールはかっこいいのでなんとなく印刷してつけました。 バッテリーの出し入れはこの10mmの六角スペーサを外すことで、ぱかっと扉みたいに開き、そこからバッテリーを入れてコネクタを接続する方式です。とっても簡単な構造になっています。 モータードライバ: 昇圧回路と保護回路の下に配置されています。流用しているCPUユニットが設計された当時は3輪オムニのロボットだったので、モーターを 3ピン×モーター3個=9ピン で制御していたのですが、4輪にするにあたって 2ピン×モーター4個=8ピン で制御しないといけなくなりました。これではピンが足りないのでモータードライバのPWMピンを5Vに接続し常にHIGHに固定し、モーターの回転方向を調整するピンに直接PWMをかますことで駆動しています。これは本来の駆動方法から外れているのであまり良い方法ではないようです。 推奨されないモータードライバの使い方なのでPWM周波数を下げないとモータードライバが応答してくれなくなりました。あまり良い対策ではないですがマイコンのタイマーをいじってPWM周波数を下げて無理矢理動かしています。 こんな無理矢理駆動ですがそもそもモーター自体の応答性が良くないので目立った問題はありませんでした。Maxonみたいなコアレスモーターで同じことをやったら確実に燃えると思います。 素子はVNH2SP30というものを使っています。あたりの率がものすごく低いので、今思えば素直にSwitch Scienceさんとかで買った方が安かったです。悲しい…。 モータードライバ4個中3個はずれでした。。。(´;ω;｀) pic. twitter. com/VVwiPl4IWN &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) April 8, 2020 ラインセンサ: こんな感じで、モーターとかモータードライバの下にある構造です。 交換しろって言われたら多分泣き出すと思います。それくらいメンテナンス製が悪いので反省点です。 こんな感じです。一個一個に可変抵抗を取り付けて調整できるようにすることで、マイコンのデジタルピンで読み込んでいます。デジタルにするとA/D変換の時間のロスがなくなるのと、ポート制御とポインタで一気に配列に格納できるというメリットがあります。 ライン対策でどんなプログラムを書いているかは、昨日誕生日だったハジメ君が良く知っています。僕はよくわかりませんがベクトルとか色々使ってやってるらしいです。 LEDの明るさはマイコンで調節できます。待機時は明るさを落として電力を節約したり（といっても微々たるものですが）できます。 ボール検知: 正確なタイミングでキックするために、ラインセンサと同じ回路を利用してボールを検知できるセンサを作りました。片方から光が出て、もう片方に受光素子があります。ボールが入って光が遮られるとキックするようにプログラムされています。ここのX字の肉抜きは個人的に気に入っているデザインです。 バッテリー: Fullymaxさんの2S 1300mAhのものをつかっています。バッテリーを安全に管理するために、一つ一つにQRコードを貼り付けてすぐに情報が見られるサイトを作って管理してます。 フレーム: ロボットのフレームは「パターンがない基板」として発注しました。つまり素材はGFRPです。強度はすこぶるいいです。JLC PCBさんに発注したのでロボット二台分+予備でも5000円ほどで作ることができたのでコスパも良くておすすめです。 最後に: こちらがこのロボットを組み立てる前の部品の写真です。 （モータードライバーが一個足りませんが）只今より二号機製作開始します！٩( &#39;ω&#39; )و pic. twitter. com/MMVmkVUKUB &mdash; しろくま🥒胡瓜 Root41 (@robokichi41) April 9, 2020 結構シンプルに組み上がったと思います。ちょっと煮詰めきれずにメンテナンス性の悪さが浮き出てしまったのが反省点ですね。 最後に3Dデータを載せておきます。 こんなよわよわのロボットでもよければ質問にできる限り答えさせていただきますので、もし何かあればTwitterのDMまたは、記事が埋め込まれたツイートにリプしてください。 　: それではまた。 "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>「" + term + "」の検索結果</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>「" + term + "」の検索結果</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><small><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>該当する記事が見つかりませんでした。他の単語で検索してみてください。</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});